// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: device_manage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Manage {

  /// <summary>Holder for reflection information generated from device_manage.proto</summary>
  public static partial class DeviceManageReflection {

    #region Descriptor
    /// <summary>File descriptor for device_manage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DeviceManageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNkZXZpY2VfbWFuYWdlLnByb3RvEgZtYW5hZ2UiLQobUXVlcnlHQkRldmlj",
            "ZUJ5R0JJRHNSZXF1ZXN0Eg4KBmdiX2lkcxgBIAMoCSJFChxRdWVyeUdCRGV2",
            "aWNlQnlHQklEc1Jlc3BvbnNlEiUKB2RldmljZXMYASADKAsyFC5tYW5hZ2Uu",
            "U2ltcGxlRGV2aWNlIk0KEkdsb2JhbFNlYXJjaERldmljZRIeCgZkZXZpY2UY",
            "ASABKAsyDi5tYW5hZ2UuRGV2aWNlEhcKD2V4aXN0aW5nX2RldmljZRgCIAEo",
            "CCJLChpTZWFyY2hHbG9iYWxEZXZpY2VzUmVxdWVzdBItCgtzZWFyY2hfdHlw",
            "ZRgBIAEoDjIYLm1hbmFnZS5HbG9iYWxTZWFyY2hUeXBlIkoKG1NlYXJjaEds",
            "b2JhbERldmljZXNSZXNwb25zZRIrCgdkZXZpY2VzGAEgAygLMhoubWFuYWdl",
            "Lkdsb2JhbFNlYXJjaERldmljZSI/ChtSZWZyZXNoRGV2aWNlUHJvZmlsZVJl",
            "cXVlc3QSIAoHcHJvZmlsZRgBIAEoCzIPLm1hbmFnZS5Qcm9maWxlIh4KHFJl",
            "ZnJlc2hEZXZpY2VQcm9maWxlUmVzcG9uc2UiLgoZUXVlcnlEZXZpY2VQcm9m",
            "aWxlUmVxdWVzdBIRCglkZXZpY2VfaWQYASABKAkiPgoaUXVlcnlEZXZpY2VQ",
            "cm9maWxlUmVzcG9uc2USIAoHcHJvZmlsZRgBIAEoCzIPLm1hbmFnZS5Qcm9m",
            "aWxlImkKB1Byb2ZpbGUSEQoJZGV2aWNlX2lkGAEgASgJEiYKB2RldGFpbHMY",
            "AiADKAsyFS5tYW5hZ2UuUHJvZmlsZURldGFpbBIRCgl1c2VyX25hbWUYAyAB",
            "KAkSEAoIcGFzc3dvcmQYBCABKAkiZAoNUHJvZmlsZURldGFpbBIMCgRuYW1l",
            "GAEgASgJEhIKCnJlc29sdXRpb24YAiABKAkSDwoHUlRTUFVSTBgDIAEoCRIL",
            "CgNGUFMYBCABKAUSEwoLZW5jb2RlX3R5cGUYBSABKAkiQgoYUXVlcnlCeVBy",
            "b3RvVHlwZXNSZXF1ZXN0EiYKC3Byb3RvX3R5cGVzGAEgAygOMhEubWFuYWdl",
            "LlByb3RvVHlwZSJCChlRdWVyeUJ5UHJvdG9UeXBlc1Jlc3BvbnNlEiUKB2Rl",
            "dmljZXMYASADKAsyFC5tYW5hZ2UuU2ltcGxlRGV2aWNlIjEKFVVwZGF0ZVZp",
            "ZXdOYW1lUmVxdWVzdBIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJIjMKGFF1",
            "ZXJ5UGFyZW50RGV2aWNlUmVxdWVzdBIXCg9jaGlsZF9kZXZpY2VfaWQYASAB",
            "KAkiSAoZUXVlcnlQYXJlbnREZXZpY2VSZXNwb25zZRIrCg1wYXJlbnRfZGV2",
            "aWNlGAEgASgLMhQubWFuYWdlLlNpbXBsZURldmljZSJGChNRdWVyeUNoYW5u",
            "ZWxSZXF1ZXN0EhUKDWxvZ2luX3JvbGVfaWQYASABKAkSGAoQcGFyZW50X2Rl",
            "dmljZV9pZBgCIAEoCSJFChRRdWVyeUNoYW5uZWxSZXNwb25zZRItCg9jaGFu",
            "bmVsX2RldmljZXMYASADKAsyFC5tYW5hZ2UuU2ltcGxlRGV2aWNlIogBCgRW",
            "aWV3EgwKBGd1aWQYASABKAkSDAoEbmFtZRgCIAEoCRITCgtkZXNjcmlwdGlv",
            "bhgDIAEoCRIRCglwYXJlbnRfaWQYBCABKAkSFgoOY2hpbGRfdmlld19pZHMY",
            "BSADKAkSEgoKZGV2aWNlX2lkcxgGIAMoCRIQCghvd25lcl9pZBgHIAEoCSLe",
            "AQoKU2ltcGxlVmlldxIMCgRndWlkGAEgASgJEgwKBG5hbWUYAiABKAkSEwoL",
            "ZGVzY3JpcHRpb24YAyABKAkSLgoSY2hpbGRfc2ltcGxlX3ZpZXdzGAQgAygL",
            "MhIubWFuYWdlLlNpbXBsZVZpZXcSJQoHZGV2aWNlcxgFIAMoCzIULm1hbmFn",
            "ZS5TaW1wbGVEZXZpY2USEAoIb3duZXJfaWQYBiABKAkSGgoSdG90YWxfZGV2",
            "aWNlX2NvdW50GAcgASgFEhoKEnRvdGFsX29ubGluZV9jb3VudBgIIAEoBSIo",
            "CgxLZXlWYWx1ZVBhaXISCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCSItCg5B",
            "ZGRWaWV3UmVxdWVzdBIbCgV2aWV3cxgBIAMoCzIMLm1hbmFnZS5WaWV3IjsK",
            "D0FkZFZpZXdSZXNwb25zZRIoCgZzdGF0dXMYASABKA4yGC5tYW5hZ2UuT1Bf",
            "UkVTVUxUX1NUQVRVUyIwChFVcGRhdGVWaWV3UmVxdWVzdBIbCgV2aWV3cxgB",
            "IAMoCzIMLm1hbmFnZS5WaWV3Ij4KElVwZGF0ZVZpZXdSZXNwb25zZRIoCgZz",
            "dGF0dXMYASABKA4yGC5tYW5hZ2UuT1BfUkVTVUxUX1NUQVRVUyIlChFEZWxl",
            "dGVWaWV3UmVxdWVzdBIQCgh2aWV3X2lkcxgBIAMoCSI+ChJEZWxldGVWaWV3",
            "UmVzcG9uc2USKAoGc3RhdHVzGAEgASgOMhgubWFuYWdlLk9QX1JFU1VMVF9T",
            "VEFUVVMiRwoSUXVlcnlTaW1wbGVSZXF1ZXN0Eg8KB3VzZXJfaWQYASABKAkS",
            "DwoHdmlld19pZBgCIAEoCRIPCgdvcmRlcmJ5GAMgASgJIi8KGVF1ZXJ5U2lt",
            "cGxlRGV2aWNlc1JlcXVlc3QSEgoKZGV2aWNlX2lkcxgBIAMoCSJxChpRdWVy",
            "eVNpbXBsZURldmljZXNSZXNwb25zZRIlCgZzdGF0dXMYASABKA4yFS5tYW5h",
            "Z2UuU0VBUkNIX1NUQVRVUxIsCg5zaW1wbGVfZGV2aWNlcxgCIAMoCzIULm1h",
            "bmFnZS5TaW1wbGVEZXZpY2UiPgoXRnV6enlRdWVyeURldmljZVJlcXVlc3QS",
            "FQoNbG9naW5fcm9sZV9pZBgBIAEoCRIMCgRuYW1lGAIgASgJIkEKGEZ1enp5",
            "UXVlcnlEZXZpY2VSZXNwb25zZRIlCgdkZXZpY2VzGAEgAygLMhQubWFuYWdl",
            "LktleVZhbHVlUGFpciItChhRdWVyeVNpbXBsZURldmljZVJlcXVlc3QSEQoJ",
            "ZGV2aWNlX2lkGAEgASgJIm8KGVF1ZXJ5U2ltcGxlRGV2aWNlUmVzcG9uc2US",
            "JQoGc3RhdHVzGAEgASgOMhUubWFuYWdlLlNFQVJDSF9TVEFUVVMSKwoNc2lt",
            "cGxlX2RldmljZRgCIAEoCzIULm1hbmFnZS5TaW1wbGVEZXZpY2UiagoXUXVl",
            "cnlTaW1wbGVWaWV3UmVzcG9uc2USJQoGc3RhdHVzGAEgASgOMhUubWFuYWdl",
            "LlNFQVJDSF9TVEFUVVMSKAoMc2ltcGxlX3ZpZXdzGAIgAygLMhIubWFuYWdl",
            "LlNpbXBsZVZpZXciqQMKBkRldmljZRIMCgRndWlkGAEgASgJEgwKBG5hbWUY",
            "AiABKAkSCgoCSVAYAyABKAkSDAoEcG9ydBgEIAEoDRIoCg1wcm90b2NvbF90",
            "eXBlGAUgASgOMhEubWFuYWdlLlByb3RvVHlwZRITCgtkZXNjcmlwdGlvbhgG",
            "IAEoCRIQCghnZW9fbG9uZxgHIAEoARIPCgdnZW9fbGF0GAggASgBEhAKCHB0",
            "el90eXBlGAkgASgNEg0KBUdCX0lEGAogASgJEhQKDEdCX1BhcmVudF9JRBgL",
            "IAEoCRInCgxtZWRpYV9kZXRhaWwYDCABKAsyES5tYW5hZ2UuTWVkaWFJbmZv",
            "EiUKCmxvZ2luX3VzZXIYDSADKAsyES5tYW5hZ2UuTG9naW5Vc2VyEgsKA3Rh",
            "ZxgOIAMoCRIVCg1tZWRpYV9zcmNUeXBlGA8gAygNEhEKCXBhcmVudF9JRBgQ",
            "IAEoCRIlCgpzaGFwZV90eXBlGBEgASgOMhEubWFuYWdlLlNoYXBlVHlwZRIi",
            "ChpsYW5ndWFnZV9mb3JtYXRfc2hhcGVfdHlwZRgSIAEoCSLcAgoMU2ltcGxl",
            "RGV2aWNlEgwKBGd1aWQYASABKAkSDAoEbmFtZRgCIAEoCRIoCg1wcm90b2Nv",
            "bF90eXBlGAMgASgOMhEubWFuYWdlLlByb3RvVHlwZRIKCgJJUBgEIAEoCRIM",
            "CgRwb3J0GAUgASgNEg0KBUdCX0lEGAYgASgJEhQKDEdCX1BhcmVudF9JRBgH",
            "IAEoCRIgCgV1c2VycxgIIAMoCzIRLm1hbmFnZS5Mb2dpblVzZXISEQoJZGV2",
            "aWNlX2lkGAkgASgJEhIKCmNoYW5uZWxfaWQYCiABKAkSEgoKcHJpbWFyeV9p",
            "ZBgLIAEoCRIOCgZzdWJfaWQYDCABKAkSEQoJcGFyZW50X2lkGA0gASgJEiUK",
            "CnNoYXBlX3R5cGUYDiABKA4yES5tYW5hZ2UuU2hhcGVUeXBlEiAKB3Byb2Zp",
            "bGUYDyABKAsyDy5tYW5hZ2UuUHJvZmlsZSIyCglMb2dpblVzZXISEgoKbG9n",
            "aW5fbmFtZRgBIAEoCRIRCglsb2dpbl9wd2QYAiABKAkiSAoORGV2aWNlQ2F0",
            "ZWdvcnkSEwoLY2F0ZWdvcnlfaWQYASABKAQSDAoEbmFtZRgCIAEoCRITCgtk",
            "ZXNjcmlwdGlvbhgDIAEoCSJzCglNZWRpYUluZm8SFAoMdmlkZW9fZW5jb2Rl",
            "GAEgASgNEhQKDGF1ZGlvX2VuY29kZRgCIAEoDRITCgt2aWRlb193aWR0aBgD",
            "IAEoDRIUCgx2aWRlb19oZWlnaHQYBCABKA0SDwoHcHJvZmlsZRgFIAEoDSK1",
            "AQoNRGV2aWNlRGV0YWlscxIMCgRndWlkGAEgASgJEhAKCHB0el90eXBlGAIg",
            "ASgNEhQKDG1hbnVmYWN0dXJlchgDIAEoCRIUCgxtb2RlbF9udW1iZXIYBCAB",
            "KAkSEwoLdmVuZG9yX25hbWUYBSABKAkSFAoMdmlkZW9fZW5jb2RlGAYgASgN",
            "EhQKDGF1ZGlvX2VuY29kZRgHIAEoDRIXCg9pc192aWRlb19kZXZpY2UYCCAB",
            "KAginQEKD0RldmljZUl0ZW1FdmVudBIMCgRndWlkGAEgASgJEgwKBG5hbWUY",
            "AiABKAkSEwoLZGVzY3JpcHRpb24YAyABKAkSMQoQZGV2aWNlX29wZXJhdGlv",
            "bhgEIAEoDjIXLm1hbmFnZS5EZXZpY2VPcGVyYXRpb24SEwoLb3BlcmF0b3Jf",
            "aWQYBSABKAkSEQoJdGltZXN0YW1wGAYgASgDIkkKEEFkZERldmljZVJlcXVl",
            "c3QSHgoGZGV2aWNlGAEgAygLMg4ubWFuYWdlLkRldmljZRIVCg1sb2dpbl9y",
            "b2xlX2lkGAIgASgJIrcBChFBZGREZXZpY2VSZXNwb25zZRIXCg9kdXBsaWNh",
            "dGVfbmFtZXMYASADKAkSIgoaY2hhbm5lbF9jcmVhdGVfZmFpbGVkX25hbWUY",
            "AiADKAkSHQoVc3VjY2Vzc19pbXBvcnRfbnVtYmVyGAMgASgFEhwKFGZhaWxl",
            "ZF9pbXBvcnRfbnVtYmVyGAQgASgFEigKBnN0YXR1cxgFIAEoDjIYLm1hbmFn",
            "ZS5PUF9SRVNVTFRfU1RBVFVTIikKE0RlbGV0ZURldmljZVJlcXVlc3QSEgoK",
            "ZGV2aWNlc19pZBgBIAMoCSJlChREZWxldGVEZXZpY2VSZXNwb25zZRIoCgZz",
            "dGF0dXMYASABKA4yGC5tYW5hZ2UuT1BfUkVTVUxUX1NUQVRVUxIjCgtkZXZp",
            "Y2VfaXRlbRgCIAMoCzIOLm1hbmFnZS5EZXZpY2UiUQoTVXBkYXRlRGV2aWNl",
            "UmVxdWVzdBIVCg1sb2dpbl9yb2xlX2lkGAEgASgJEiMKC2RldmljZV9pdGVt",
            "GAIgAygLMg4ubWFuYWdlLkRldmljZSJlChRVcGRhdGVEZXZpY2VSZXNwb25z",
            "ZRIoCgZzdGF0dXMYASABKA4yGC5tYW5hZ2UuT1BfUkVTVUxUX1NUQVRVUxIj",
            "CgtkZXZpY2VfaXRlbRgDIAMoCzIOLm1hbmFnZS5EZXZpY2UixwEKDFF1ZXJ5",
            "UmVxdWVzdBIvCg9xdWVyeV9jb25kaXRpb24YASABKAsyFi5tYW5hZ2UuUXVl",
            "cnlDb25kaXRpb24SIAoHb3JkZXJieRgCIAEoDjIPLm1hbmFnZS5PcmRlckJ5",
            "EhAKCElzQXNjZW5kGAMgASgIEhMKC3BhZ2VfbnVtYmVyGAQgASgFEhYKDmNv",
            "dW50X3Blcl9wYWdlGAUgASgFEhMKC2xvZ2luUm9sZUlkGAYgASgJEhAKCGxh",
            "bmd1YWdlGAcgASgJImoKDlF1ZXJ5Q29uZGl0aW9uEhMKC2RldmljZV9uYW1l",
            "GAEgASgJEgoKAmlwGAIgASgJEikKDnByb3RvY29sX3R5cGVzGAMgAygOMhEu",
            "bWFuYWdlLlByb3RvVHlwZRIMCgRwb3J0GAQgASgFIicKElF1ZXJ5RGV2aWNl",
            "UmVxdWVzdBIRCglkZXZpY2VfaWQYASABKAkihgEKE1F1ZXJ5RGV2aWNlUmVz",
            "cG9uc2USJQoGc3RhdHVzGAEgASgOMhUubWFuYWdlLlNFQVJDSF9TVEFUVVMS",
            "HwoHZGV2aWNlcxgCIAMoCzIOLm1hbmFnZS5EZXZpY2USEwoLdG90YWxfY291",
            "bnQYAyABKAUSEgoKdG90YWxfcGFnZRgEIAEoBSJcCg9DaGVja0R1cFJlcXVl",
            "c3QSEQoJdGltZXN0YW1wGAEgASgEEiIKCGNhdGVnb3J5GAIgASgOMhAubWFu",
            "YWdlLkNhdGVnb3J5EhIKCmNoZWNrVmFsdWUYAyADKAkiXAoQQ2hlY2tEdXBS",
            "ZXNwb25zZRIoCgZzdGF0dXMYASABKA4yGC5tYW5hZ2UuQ0hFQ0tEVVBMX1JF",
            "U1VMVBIRCglkdXBsVmFsdWUYAiADKAkSCwoDbXNnGAMgASgJIqYDChNEZXZp",
            "Y2VDaGFuZ2VNZXNzYWdlEhAKCGRldmljZUlEGAEgASgJEgoKAmlwGAIgASgJ",
            "EgwKBHBvcnQYAyABKAUSEQoJbG9naW5OYW1lGAQgASgJEhAKCGxvZ2luUHdk",
            "GAUgASgJEjIKBmFjdGlvbhgGIAEoDjIiLm1hbmFnZS5EZXZpY2VDaGFuZ2VN",
            "ZXNzYWdlLkFjdGlvbhISCgpkZXZpY2VOYW1lGAcgASgJEg0KBUdCX0lEGAgg",
            "ASgJEhQKDEdCX1BhcmVudF9JRBgJIAEoCRISCgpjaGFubmVsX2lkGAogASgJ",
            "Eg0KBURWUklEGAsgASgJEhIKCnByaW1hcnlfaWQYDCABKAkSDgoGc3ViX2lk",
            "GA0gASgJEiUKCnByb3RvX3R5cGUYDiABKA4yES5tYW5hZ2UuUHJvdG9UeXBl",
            "EhEKCXBhcmVudF9pZBgPIAEoCRIlCgpzaGFwZV90eXBlGBAgASgOMhEubWFu",
            "YWdlLlNoYXBlVHlwZSIpCgZBY3Rpb24SBwoDQWRkEAASCgoGVXBkYXRlEAES",
            "CgoGRGVsZXRlEAIqLAoQR2xvYmFsU2VhcmNoVHlwZRIPCgtOb1NwZWNpZmll",
            "ZBAAEgcKA0lQQxABKm4KCVByb3RvVHlwZRIRCg1QUk9UT19HQjI4MTgxEAAS",
            "EQoNUFJPVE9fTlZSNzEyOBABEhkKFVBST1RPX05WUjcxMjhfQ2hhbm5lbBAC",
            "Eg8KC1BST1RPX09OVklGEAMSDwoLUFJPVE9fSVBTQU4QBCpOCgdQVFpUeXBl",
            "EhcKE0NBTV9ET01FX0hJR0hfU1BFRUQQABIMCghDQU1fRE9NRRABEgsKB0NB",
            "TV9CT1gQAhIPCgtDQU1fQk9YX0ZJWBADKkAKCVNoYXBlVHlwZRIOCgpOb3RT",
            "dXBwb3J0EAASCgoGQnVsbGV0EAESCAoERG9tZRACEg0KCUZpeGVkRG9tZRAD",
            "KmEKD0RldmljZU9wZXJhdGlvbhIPCgtET1BfVU5LTk9XThAAEg4KCkRPUF9D",
            "UkVBVEUQARIOCgpET1BfREVMRVRFEAISDgoKRE9QX1VQREFURRADEg0KCURP",
            "UF9RVUVSWRAEKjcKB09yZGVyQnkSCAoETmFtZRAAEgYKAklwEAESCAoEUG9y",
            "dBACEhAKDFByb3RvY29sVHlwZRADKlgKCENhdGVnb3J5EhEKDUNhdGVnb3J5",
            "X1JvbGUQABIRCg1DYXRlZ29yeV9Vc2VyEAESEwoPQ2F0ZWdvcnlfRGV2aWNl",
            "EAISEQoNQ2F0ZWdvcnlfVmlldxADKlIKEENIRUNLRFVQTF9SRVNVTFQSEgoO",
            "Q0hFQ0tEVVBMX0RVUEwQABIUChBDSEVDS0RVUExfTk9EVVBMEAESFAoQQ0hF",
            "Q0tEVVBMX0ZBSUxFRBACKmwKEE9QX1JFU1VMVF9TVEFUVVMSDgoKT1BfU1VD",
            "Q0VTUxAAEhAKDE9QX0VYQ0VQVElPThABEhQKEE9QX05BTUVEVVBMSUNBVEUQ",
            "AhIgChxPUF9SRVNPVVJDRU9DQ1VSUkVERVhDRVBUSU9OEAMqUgoNU0VBUkNI",
            "X1NUQVRVUxIWChJTRUFSQ0hfSU5fUFJPR1JFU1MQABITCg9TRUFSQ0hfRklO",
            "SVNIRUQQARIUChBTRUFSQ0hfRVhDRVBUSU9OEAIqJgoSRGV2aWNlTWVzc2Fn",
            "ZVRvcGljEhAKDERldmljZUNoYW5nZRAAMpANCgZNYW5hZ2USQgoJQWRkRGV2",
            "aWNlEhgubWFuYWdlLkFkZERldmljZVJlcXVlc3QaGS5tYW5hZ2UuQWRkRGV2",
            "aWNlUmVzcG9uc2UiABJLCgxEZWxldGVEZXZpY2USGy5tYW5hZ2UuRGVsZXRl",
            "RGV2aWNlUmVxdWVzdBocLm1hbmFnZS5EZWxldGVEZXZpY2VSZXNwb25zZSIA",
            "EksKDFVwZGF0ZURldmljZRIbLm1hbmFnZS5VcGRhdGVEZXZpY2VSZXF1ZXN0",
            "GhwubWFuYWdlLlVwZGF0ZURldmljZVJlc3BvbnNlIgASQgoLUXVlcnlEZXZp",
            "Y2USFC5tYW5hZ2UuUXVlcnlSZXF1ZXN0GhsubWFuYWdlLlF1ZXJ5RGV2aWNl",
            "UmVzcG9uc2UiABJMCg9RdWVyeURldmljZUJ5SWQSGi5tYW5hZ2UuUXVlcnlE",
            "ZXZpY2VSZXF1ZXN0GhsubWFuYWdlLlF1ZXJ5RGV2aWNlUmVzcG9uc2UiABJA",
            "CglDaGVja0R1cGwSFy5tYW5hZ2UuQ2hlY2tEdXBSZXF1ZXN0GhgubWFuYWdl",
            "LkNoZWNrRHVwUmVzcG9uc2UiABI8CgdBZGRWaWV3EhYubWFuYWdlLkFkZFZp",
            "ZXdSZXF1ZXN0GhcubWFuYWdlLkFkZFZpZXdSZXNwb25zZSIAEkUKCkRlbGV0",
            "ZVZpZXcSGS5tYW5hZ2UuRGVsZXRlVmlld1JlcXVlc3QaGi5tYW5hZ2UuRGVs",
            "ZXRlVmlld1Jlc3BvbnNlIgASRQoKVXBkYXRlVmlldxIZLm1hbmFnZS5VcGRh",
            "dGVWaWV3UmVxdWVzdBoaLm1hbmFnZS5VcGRhdGVWaWV3UmVzcG9uc2UiABJQ",
            "Cg9RdWVyeVNpbXBsZVZpZXcSGi5tYW5hZ2UuUXVlcnlTaW1wbGVSZXF1ZXN0",
            "Gh8ubWFuYWdlLlF1ZXJ5U2ltcGxlVmlld1Jlc3BvbnNlIgASYQoWUXVlcnlT",
            "aW1wbGVEZXZpY2VCeUlkcxIhLm1hbmFnZS5RdWVyeVNpbXBsZURldmljZXNS",
            "ZXF1ZXN0GiIubWFuYWdlLlF1ZXJ5U2ltcGxlRGV2aWNlc1Jlc3BvbnNlIgAS",
            "XQoWRnV6enlRdWVyeURldmljZUJ5TmFtZRIfLm1hbmFnZS5GdXp6eVF1ZXJ5",
            "RGV2aWNlUmVxdWVzdBogLm1hbmFnZS5GdXp6eVF1ZXJ5RGV2aWNlUmVzcG9u",
            "c2UiABJSChNRdWVyeUNoYW5uZWxEZXZpY2VzEhsubWFuYWdlLlF1ZXJ5Q2hh",
            "bm5lbFJlcXVlc3QaHC5tYW5hZ2UuUXVlcnlDaGFubmVsUmVzcG9uc2UiABJj",
            "ChpRdWVyeVBhcmVudERldmljZUJ5Q2hpbGRJRBIgLm1hbmFnZS5RdWVyeVBh",
            "cmVudERldmljZVJlcXVlc3QaIS5tYW5hZ2UuUXVlcnlQYXJlbnREZXZpY2VS",
            "ZXNwb25zZSIAEk0KDlVwZGF0ZVZpZXdOYW1lEh0ubWFuYWdlLlVwZGF0ZVZp",
            "ZXdOYW1lUmVxdWVzdBoaLm1hbmFnZS5VcGRhdGVWaWV3UmVzcG9uc2UiABJh",
            "ChhRdWVyeURldmljZXNCeVByb3RvVHlwZXMSIC5tYW5hZ2UuUXVlcnlCeVBy",
            "b3RvVHlwZXNSZXF1ZXN0GiEubWFuYWdlLlF1ZXJ5QnlQcm90b1R5cGVzUmVz",
            "cG9uc2UiABJdChJRdWVyeURldmljZVByb2ZpbGUSIS5tYW5hZ2UuUXVlcnlE",
            "ZXZpY2VQcm9maWxlUmVxdWVzdBoiLm1hbmFnZS5RdWVyeURldmljZVByb2Zp",
            "bGVSZXNwb25zZSIAEmMKFFJlZnJlc2hEZXZpY2VQcm9maWxlEiMubWFuYWdl",
            "LlJlZnJlc2hEZXZpY2VQcm9maWxlUmVxdWVzdBokLm1hbmFnZS5SZWZyZXNo",
            "RGV2aWNlUHJvZmlsZVJlc3BvbnNlIgASYAoTU2VhcmNoR2xvYmFsRGV2aWNl",
            "cxIiLm1hbmFnZS5TZWFyY2hHbG9iYWxEZXZpY2VzUmVxdWVzdBojLm1hbmFn",
            "ZS5TZWFyY2hHbG9iYWxEZXZpY2VzUmVzcG9uc2UiABJjChRRdWVyeUdCRGV2",
            "aWNlQnlHQklEcxIjLm1hbmFnZS5RdWVyeUdCRGV2aWNlQnlHQklEc1JlcXVl",
            "c3QaJC5tYW5hZ2UuUXVlcnlHQkRldmljZUJ5R0JJRHNSZXNwb25zZSIAYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Manage.GlobalSearchType), typeof(global::Manage.ProtoType), typeof(global::Manage.PTZType), typeof(global::Manage.ShapeType), typeof(global::Manage.DeviceOperation), typeof(global::Manage.OrderBy), typeof(global::Manage.Category), typeof(global::Manage.CHECKDUPL_RESULT), typeof(global::Manage.OP_RESULT_STATUS), typeof(global::Manage.SEARCH_STATUS), typeof(global::Manage.DeviceMessageTopic), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryGBDeviceByGBIDsRequest), global::Manage.QueryGBDeviceByGBIDsRequest.Parser, new[]{ "GbIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryGBDeviceByGBIDsResponse), global::Manage.QueryGBDeviceByGBIDsResponse.Parser, new[]{ "Devices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.GlobalSearchDevice), global::Manage.GlobalSearchDevice.Parser, new[]{ "Device", "ExistingDevice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.SearchGlobalDevicesRequest), global::Manage.SearchGlobalDevicesRequest.Parser, new[]{ "SearchType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.SearchGlobalDevicesResponse), global::Manage.SearchGlobalDevicesResponse.Parser, new[]{ "Devices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.RefreshDeviceProfileRequest), global::Manage.RefreshDeviceProfileRequest.Parser, new[]{ "Profile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.RefreshDeviceProfileResponse), global::Manage.RefreshDeviceProfileResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryDeviceProfileRequest), global::Manage.QueryDeviceProfileRequest.Parser, new[]{ "DeviceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryDeviceProfileResponse), global::Manage.QueryDeviceProfileResponse.Parser, new[]{ "Profile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.Profile), global::Manage.Profile.Parser, new[]{ "DeviceId", "Details", "UserName", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.ProfileDetail), global::Manage.ProfileDetail.Parser, new[]{ "Name", "Resolution", "RTSPURL", "FPS", "EncodeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryByProtoTypesRequest), global::Manage.QueryByProtoTypesRequest.Parser, new[]{ "ProtoTypes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryByProtoTypesResponse), global::Manage.QueryByProtoTypesResponse.Parser, new[]{ "Devices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.UpdateViewNameRequest), global::Manage.UpdateViewNameRequest.Parser, new[]{ "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryParentDeviceRequest), global::Manage.QueryParentDeviceRequest.Parser, new[]{ "ChildDeviceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryParentDeviceResponse), global::Manage.QueryParentDeviceResponse.Parser, new[]{ "ParentDevice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryChannelRequest), global::Manage.QueryChannelRequest.Parser, new[]{ "LoginRoleId", "ParentDeviceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryChannelResponse), global::Manage.QueryChannelResponse.Parser, new[]{ "ChannelDevices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.View), global::Manage.View.Parser, new[]{ "Guid", "Name", "Description", "ParentId", "ChildViewIds", "DeviceIds", "OwnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.SimpleView), global::Manage.SimpleView.Parser, new[]{ "Guid", "Name", "Description", "ChildSimpleViews", "Devices", "OwnerId", "TotalDeviceCount", "TotalOnlineCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.KeyValuePair), global::Manage.KeyValuePair.Parser, new[]{ "Id", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.AddViewRequest), global::Manage.AddViewRequest.Parser, new[]{ "Views" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.AddViewResponse), global::Manage.AddViewResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.UpdateViewRequest), global::Manage.UpdateViewRequest.Parser, new[]{ "Views" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.UpdateViewResponse), global::Manage.UpdateViewResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.DeleteViewRequest), global::Manage.DeleteViewRequest.Parser, new[]{ "ViewIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.DeleteViewResponse), global::Manage.DeleteViewResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QuerySimpleRequest), global::Manage.QuerySimpleRequest.Parser, new[]{ "UserId", "ViewId", "Orderby" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QuerySimpleDevicesRequest), global::Manage.QuerySimpleDevicesRequest.Parser, new[]{ "DeviceIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QuerySimpleDevicesResponse), global::Manage.QuerySimpleDevicesResponse.Parser, new[]{ "Status", "SimpleDevices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.FuzzyQueryDeviceRequest), global::Manage.FuzzyQueryDeviceRequest.Parser, new[]{ "LoginRoleId", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.FuzzyQueryDeviceResponse), global::Manage.FuzzyQueryDeviceResponse.Parser, new[]{ "Devices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QuerySimpleDeviceRequest), global::Manage.QuerySimpleDeviceRequest.Parser, new[]{ "DeviceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QuerySimpleDeviceResponse), global::Manage.QuerySimpleDeviceResponse.Parser, new[]{ "Status", "SimpleDevice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QuerySimpleViewResponse), global::Manage.QuerySimpleViewResponse.Parser, new[]{ "Status", "SimpleViews" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.Device), global::Manage.Device.Parser, new[]{ "Guid", "Name", "IP", "Port", "ProtocolType", "Description", "GeoLong", "GeoLat", "PtzType", "GBID", "GBParentID", "MediaDetail", "LoginUser", "Tag", "MediaSrcType", "ParentID", "ShapeType", "LanguageFormatShapeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.SimpleDevice), global::Manage.SimpleDevice.Parser, new[]{ "Guid", "Name", "ProtocolType", "IP", "Port", "GBID", "GBParentID", "Users", "DeviceId", "ChannelId", "PrimaryId", "SubId", "ParentId", "ShapeType", "Profile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.LoginUser), global::Manage.LoginUser.Parser, new[]{ "LoginName", "LoginPwd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.DeviceCategory), global::Manage.DeviceCategory.Parser, new[]{ "CategoryId", "Name", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.MediaInfo), global::Manage.MediaInfo.Parser, new[]{ "VideoEncode", "AudioEncode", "VideoWidth", "VideoHeight", "Profile" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.DeviceDetails), global::Manage.DeviceDetails.Parser, new[]{ "Guid", "PtzType", "Manufacturer", "ModelNumber", "VendorName", "VideoEncode", "AudioEncode", "IsVideoDevice" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.DeviceItemEvent), global::Manage.DeviceItemEvent.Parser, new[]{ "Guid", "Name", "Description", "DeviceOperation", "OperatorId", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.AddDeviceRequest), global::Manage.AddDeviceRequest.Parser, new[]{ "Device", "LoginRoleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.AddDeviceResponse), global::Manage.AddDeviceResponse.Parser, new[]{ "DuplicateNames", "ChannelCreateFailedName", "SuccessImportNumber", "FailedImportNumber", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.DeleteDeviceRequest), global::Manage.DeleteDeviceRequest.Parser, new[]{ "DevicesId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.DeleteDeviceResponse), global::Manage.DeleteDeviceResponse.Parser, new[]{ "Status", "DeviceItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.UpdateDeviceRequest), global::Manage.UpdateDeviceRequest.Parser, new[]{ "LoginRoleId", "DeviceItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.UpdateDeviceResponse), global::Manage.UpdateDeviceResponse.Parser, new[]{ "Status", "DeviceItem" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryRequest), global::Manage.QueryRequest.Parser, new[]{ "QueryCondition", "Orderby", "IsAscend", "PageNumber", "CountPerPage", "LoginRoleId", "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryCondition), global::Manage.QueryCondition.Parser, new[]{ "DeviceName", "Ip", "ProtocolTypes", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryDeviceRequest), global::Manage.QueryDeviceRequest.Parser, new[]{ "DeviceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.QueryDeviceResponse), global::Manage.QueryDeviceResponse.Parser, new[]{ "Status", "Devices", "TotalCount", "TotalPage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.CheckDupRequest), global::Manage.CheckDupRequest.Parser, new[]{ "Timestamp", "Category", "CheckValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.CheckDupResponse), global::Manage.CheckDupResponse.Parser, new[]{ "Status", "DuplValue", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Manage.DeviceChangeMessage), global::Manage.DeviceChangeMessage.Parser, new[]{ "DeviceID", "Ip", "Port", "LoginName", "LoginPwd", "Action", "DeviceName", "GBID", "GBParentID", "ChannelId", "DVRID", "PrimaryId", "SubId", "ProtoType", "ParentId", "ShapeType" }, null, new[]{ typeof(global::Manage.DeviceChangeMessage.Types.Action) }, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum GlobalSearchType {
    [pbr::OriginalName("NoSpecified")] NoSpecified = 0,
    [pbr::OriginalName("IPC")] Ipc = 1,
  }

  public enum ProtoType {
    [pbr::OriginalName("PROTO_GB28181")] ProtoGb28181 = 0,
    [pbr::OriginalName("PROTO_NVR7128")] ProtoNvr7128 = 1,
    [pbr::OriginalName("PROTO_NVR7128_Channel")] ProtoNvr7128Channel = 2,
    [pbr::OriginalName("PROTO_ONVIF")] ProtoOnvif = 3,
    [pbr::OriginalName("PROTO_IPSAN")] ProtoIpsan = 4,
  }

  public enum PTZType {
    [pbr::OriginalName("CAM_DOME_HIGH_SPEED")] CamDomeHighSpeed = 0,
    [pbr::OriginalName("CAM_DOME")] CamDome = 1,
    [pbr::OriginalName("CAM_BOX")] CamBox = 2,
    [pbr::OriginalName("CAM_BOX_FIX")] CamBoxFix = 3,
  }

  public enum ShapeType {
    [pbr::OriginalName("NotSupport")] NotSupport = 0,
    [pbr::OriginalName("Bullet")] Bullet = 1,
    [pbr::OriginalName("Dome")] Dome = 2,
    [pbr::OriginalName("FixedDome")] FixedDome = 3,
  }

  public enum DeviceOperation {
    [pbr::OriginalName("DOP_UNKNOWN")] DopUnknown = 0,
    [pbr::OriginalName("DOP_CREATE")] DopCreate = 1,
    [pbr::OriginalName("DOP_DELETE")] DopDelete = 2,
    [pbr::OriginalName("DOP_UPDATE")] DopUpdate = 3,
    [pbr::OriginalName("DOP_QUERY")] DopQuery = 4,
  }

  public enum OrderBy {
    [pbr::OriginalName("Name")] Name = 0,
    [pbr::OriginalName("Ip")] Ip = 1,
    [pbr::OriginalName("Port")] Port = 2,
    [pbr::OriginalName("ProtocolType")] ProtocolType = 3,
  }

  public enum Category {
    [pbr::OriginalName("Category_Role")] Role = 0,
    [pbr::OriginalName("Category_User")] User = 1,
    [pbr::OriginalName("Category_Device")] Device = 2,
    [pbr::OriginalName("Category_View")] View = 3,
  }

  public enum CHECKDUPL_RESULT {
    [pbr::OriginalName("CHECKDUPL_DUPL")] CheckduplDupl = 0,
    [pbr::OriginalName("CHECKDUPL_NODUPL")] CheckduplNodupl = 1,
    [pbr::OriginalName("CHECKDUPL_FAILED")] CheckduplFailed = 2,
  }

  public enum OP_RESULT_STATUS {
    [pbr::OriginalName("OP_SUCCESS")] OpSuccess = 0,
    [pbr::OriginalName("OP_EXCEPTION")] OpException = 1,
    [pbr::OriginalName("OP_NAMEDUPLICATE")] OpNameduplicate = 2,
    [pbr::OriginalName("OP_RESOURCEOCCURREDEXCEPTION")] OpResourceoccurredexception = 3,
  }

  public enum SEARCH_STATUS {
    [pbr::OriginalName("SEARCH_IN_PROGRESS")] SearchInProgress = 0,
    [pbr::OriginalName("SEARCH_FINISHED")] SearchFinished = 1,
    [pbr::OriginalName("SEARCH_EXCEPTION")] SearchException = 2,
  }

  public enum DeviceMessageTopic {
    [pbr::OriginalName("DeviceChange")] DeviceChange = 0,
  }

  #endregion

  #region Messages
  public sealed partial class QueryGBDeviceByGBIDsRequest : pb::IMessage<QueryGBDeviceByGBIDsRequest> {
    private static readonly pb::MessageParser<QueryGBDeviceByGBIDsRequest> _parser = new pb::MessageParser<QueryGBDeviceByGBIDsRequest>(() => new QueryGBDeviceByGBIDsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryGBDeviceByGBIDsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryGBDeviceByGBIDsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryGBDeviceByGBIDsRequest(QueryGBDeviceByGBIDsRequest other) : this() {
      gbIds_ = other.gbIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryGBDeviceByGBIDsRequest Clone() {
      return new QueryGBDeviceByGBIDsRequest(this);
    }

    /// <summary>Field number for the "gb_ids" field.</summary>
    public const int GbIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_gbIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> gbIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> GbIds {
      get { return gbIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryGBDeviceByGBIDsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryGBDeviceByGBIDsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gbIds_.Equals(other.gbIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gbIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gbIds_.WriteTo(output, _repeated_gbIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gbIds_.CalculateSize(_repeated_gbIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryGBDeviceByGBIDsRequest other) {
      if (other == null) {
        return;
      }
      gbIds_.Add(other.gbIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gbIds_.AddEntriesFrom(input, _repeated_gbIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryGBDeviceByGBIDsResponse : pb::IMessage<QueryGBDeviceByGBIDsResponse> {
    private static readonly pb::MessageParser<QueryGBDeviceByGBIDsResponse> _parser = new pb::MessageParser<QueryGBDeviceByGBIDsResponse>(() => new QueryGBDeviceByGBIDsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryGBDeviceByGBIDsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryGBDeviceByGBIDsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryGBDeviceByGBIDsResponse(QueryGBDeviceByGBIDsResponse other) : this() {
      devices_ = other.devices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryGBDeviceByGBIDsResponse Clone() {
      return new QueryGBDeviceByGBIDsResponse(this);
    }

    /// <summary>Field number for the "devices" field.</summary>
    public const int DevicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Manage.SimpleDevice> _repeated_devices_codec
        = pb::FieldCodec.ForMessage(10, global::Manage.SimpleDevice.Parser);
    private readonly pbc::RepeatedField<global::Manage.SimpleDevice> devices_ = new pbc::RepeatedField<global::Manage.SimpleDevice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.SimpleDevice> Devices {
      get { return devices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryGBDeviceByGBIDsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryGBDeviceByGBIDsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!devices_.Equals(other.devices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= devices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      devices_.WriteTo(output, _repeated_devices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += devices_.CalculateSize(_repeated_devices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryGBDeviceByGBIDsResponse other) {
      if (other == null) {
        return;
      }
      devices_.Add(other.devices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            devices_.AddEntriesFrom(input, _repeated_devices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GlobalSearchDevice : pb::IMessage<GlobalSearchDevice> {
    private static readonly pb::MessageParser<GlobalSearchDevice> _parser = new pb::MessageParser<GlobalSearchDevice>(() => new GlobalSearchDevice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GlobalSearchDevice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalSearchDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalSearchDevice(GlobalSearchDevice other) : this() {
      Device = other.device_ != null ? other.Device.Clone() : null;
      existingDevice_ = other.existingDevice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GlobalSearchDevice Clone() {
      return new GlobalSearchDevice(this);
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 1;
    private global::Manage.Device device_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.Device Device {
      get { return device_; }
      set {
        device_ = value;
      }
    }

    /// <summary>Field number for the "existing_device" field.</summary>
    public const int ExistingDeviceFieldNumber = 2;
    private bool existingDevice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExistingDevice {
      get { return existingDevice_; }
      set {
        existingDevice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GlobalSearchDevice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GlobalSearchDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Device, other.Device)) return false;
      if (ExistingDevice != other.ExistingDevice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (device_ != null) hash ^= Device.GetHashCode();
      if (ExistingDevice != false) hash ^= ExistingDevice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (device_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Device);
      }
      if (ExistingDevice != false) {
        output.WriteRawTag(16);
        output.WriteBool(ExistingDevice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (device_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
      }
      if (ExistingDevice != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GlobalSearchDevice other) {
      if (other == null) {
        return;
      }
      if (other.device_ != null) {
        if (device_ == null) {
          device_ = new global::Manage.Device();
        }
        Device.MergeFrom(other.Device);
      }
      if (other.ExistingDevice != false) {
        ExistingDevice = other.ExistingDevice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (device_ == null) {
              device_ = new global::Manage.Device();
            }
            input.ReadMessage(device_);
            break;
          }
          case 16: {
            ExistingDevice = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchGlobalDevicesRequest : pb::IMessage<SearchGlobalDevicesRequest> {
    private static readonly pb::MessageParser<SearchGlobalDevicesRequest> _parser = new pb::MessageParser<SearchGlobalDevicesRequest>(() => new SearchGlobalDevicesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchGlobalDevicesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchGlobalDevicesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchGlobalDevicesRequest(SearchGlobalDevicesRequest other) : this() {
      searchType_ = other.searchType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchGlobalDevicesRequest Clone() {
      return new SearchGlobalDevicesRequest(this);
    }

    /// <summary>Field number for the "search_type" field.</summary>
    public const int SearchTypeFieldNumber = 1;
    private global::Manage.GlobalSearchType searchType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.GlobalSearchType SearchType {
      get { return searchType_; }
      set {
        searchType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchGlobalDevicesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchGlobalDevicesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchType != other.SearchType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SearchType != 0) hash ^= SearchType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SearchType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) SearchType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SearchType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SearchType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchGlobalDevicesRequest other) {
      if (other == null) {
        return;
      }
      if (other.SearchType != 0) {
        SearchType = other.SearchType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            searchType_ = (global::Manage.GlobalSearchType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SearchGlobalDevicesResponse : pb::IMessage<SearchGlobalDevicesResponse> {
    private static readonly pb::MessageParser<SearchGlobalDevicesResponse> _parser = new pb::MessageParser<SearchGlobalDevicesResponse>(() => new SearchGlobalDevicesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SearchGlobalDevicesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchGlobalDevicesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchGlobalDevicesResponse(SearchGlobalDevicesResponse other) : this() {
      devices_ = other.devices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchGlobalDevicesResponse Clone() {
      return new SearchGlobalDevicesResponse(this);
    }

    /// <summary>Field number for the "devices" field.</summary>
    public const int DevicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Manage.GlobalSearchDevice> _repeated_devices_codec
        = pb::FieldCodec.ForMessage(10, global::Manage.GlobalSearchDevice.Parser);
    private readonly pbc::RepeatedField<global::Manage.GlobalSearchDevice> devices_ = new pbc::RepeatedField<global::Manage.GlobalSearchDevice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.GlobalSearchDevice> Devices {
      get { return devices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SearchGlobalDevicesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SearchGlobalDevicesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!devices_.Equals(other.devices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= devices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      devices_.WriteTo(output, _repeated_devices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += devices_.CalculateSize(_repeated_devices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SearchGlobalDevicesResponse other) {
      if (other == null) {
        return;
      }
      devices_.Add(other.devices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            devices_.AddEntriesFrom(input, _repeated_devices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RefreshDeviceProfileRequest : pb::IMessage<RefreshDeviceProfileRequest> {
    private static readonly pb::MessageParser<RefreshDeviceProfileRequest> _parser = new pb::MessageParser<RefreshDeviceProfileRequest>(() => new RefreshDeviceProfileRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RefreshDeviceProfileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshDeviceProfileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshDeviceProfileRequest(RefreshDeviceProfileRequest other) : this() {
      Profile = other.profile_ != null ? other.Profile.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshDeviceProfileRequest Clone() {
      return new RefreshDeviceProfileRequest(this);
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 1;
    private global::Manage.Profile profile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.Profile Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RefreshDeviceProfileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RefreshDeviceProfileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Profile, other.Profile)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (profile_ != null) hash ^= Profile.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Profile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RefreshDeviceProfileRequest other) {
      if (other == null) {
        return;
      }
      if (other.profile_ != null) {
        if (profile_ == null) {
          profile_ = new global::Manage.Profile();
        }
        Profile.MergeFrom(other.Profile);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (profile_ == null) {
              profile_ = new global::Manage.Profile();
            }
            input.ReadMessage(profile_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RefreshDeviceProfileResponse : pb::IMessage<RefreshDeviceProfileResponse> {
    private static readonly pb::MessageParser<RefreshDeviceProfileResponse> _parser = new pb::MessageParser<RefreshDeviceProfileResponse>(() => new RefreshDeviceProfileResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RefreshDeviceProfileResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshDeviceProfileResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshDeviceProfileResponse(RefreshDeviceProfileResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshDeviceProfileResponse Clone() {
      return new RefreshDeviceProfileResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RefreshDeviceProfileResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RefreshDeviceProfileResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RefreshDeviceProfileResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class QueryDeviceProfileRequest : pb::IMessage<QueryDeviceProfileRequest> {
    private static readonly pb::MessageParser<QueryDeviceProfileRequest> _parser = new pb::MessageParser<QueryDeviceProfileRequest>(() => new QueryDeviceProfileRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryDeviceProfileRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDeviceProfileRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDeviceProfileRequest(QueryDeviceProfileRequest other) : this() {
      deviceId_ = other.deviceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDeviceProfileRequest Clone() {
      return new QueryDeviceProfileRequest(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryDeviceProfileRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryDeviceProfileRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryDeviceProfileRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeviceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryDeviceProfileResponse : pb::IMessage<QueryDeviceProfileResponse> {
    private static readonly pb::MessageParser<QueryDeviceProfileResponse> _parser = new pb::MessageParser<QueryDeviceProfileResponse>(() => new QueryDeviceProfileResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryDeviceProfileResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDeviceProfileResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDeviceProfileResponse(QueryDeviceProfileResponse other) : this() {
      Profile = other.profile_ != null ? other.Profile.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDeviceProfileResponse Clone() {
      return new QueryDeviceProfileResponse(this);
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 1;
    private global::Manage.Profile profile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.Profile Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryDeviceProfileResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryDeviceProfileResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Profile, other.Profile)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (profile_ != null) hash ^= Profile.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profile_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Profile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryDeviceProfileResponse other) {
      if (other == null) {
        return;
      }
      if (other.profile_ != null) {
        if (profile_ == null) {
          profile_ = new global::Manage.Profile();
        }
        Profile.MergeFrom(other.Profile);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (profile_ == null) {
              profile_ = new global::Manage.Profile();
            }
            input.ReadMessage(profile_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Profile : pb::IMessage<Profile> {
    private static readonly pb::MessageParser<Profile> _parser = new pb::MessageParser<Profile>(() => new Profile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Profile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Profile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Profile(Profile other) : this() {
      deviceId_ = other.deviceId_;
      details_ = other.details_.Clone();
      userName_ = other.userName_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Profile Clone() {
      return new Profile(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Manage.ProfileDetail> _repeated_details_codec
        = pb::FieldCodec.ForMessage(18, global::Manage.ProfileDetail.Parser);
    private readonly pbc::RepeatedField<global::Manage.ProfileDetail> details_ = new pbc::RepeatedField<global::Manage.ProfileDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.ProfileDetail> Details {
      get { return details_; }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 3;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 4;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Profile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Profile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if(!details_.Equals(other.details_)) return false;
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      hash ^= details_.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceId);
      }
      details_.WriteTo(output, _repeated_details_codec);
      if (UserName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      size += details_.CalculateSize(_repeated_details_codec);
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Profile other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      details_.Add(other.details_);
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeviceId = input.ReadString();
            break;
          }
          case 18: {
            details_.AddEntriesFrom(input, _repeated_details_codec);
            break;
          }
          case 26: {
            UserName = input.ReadString();
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProfileDetail : pb::IMessage<ProfileDetail> {
    private static readonly pb::MessageParser<ProfileDetail> _parser = new pb::MessageParser<ProfileDetail>(() => new ProfileDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfileDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileDetail(ProfileDetail other) : this() {
      name_ = other.name_;
      resolution_ = other.resolution_;
      rTSPURL_ = other.rTSPURL_;
      fPS_ = other.fPS_;
      encodeType_ = other.encodeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfileDetail Clone() {
      return new ProfileDetail(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resolution" field.</summary>
    public const int ResolutionFieldNumber = 2;
    private string resolution_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Resolution {
      get { return resolution_; }
      set {
        resolution_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RTSPURL" field.</summary>
    public const int RTSPURLFieldNumber = 3;
    private string rTSPURL_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RTSPURL {
      get { return rTSPURL_; }
      set {
        rTSPURL_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FPS" field.</summary>
    public const int FPSFieldNumber = 4;
    private int fPS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FPS {
      get { return fPS_; }
      set {
        fPS_ = value;
      }
    }

    /// <summary>Field number for the "encode_type" field.</summary>
    public const int EncodeTypeFieldNumber = 5;
    private string encodeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EncodeType {
      get { return encodeType_; }
      set {
        encodeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfileDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfileDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Resolution != other.Resolution) return false;
      if (RTSPURL != other.RTSPURL) return false;
      if (FPS != other.FPS) return false;
      if (EncodeType != other.EncodeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Resolution.Length != 0) hash ^= Resolution.GetHashCode();
      if (RTSPURL.Length != 0) hash ^= RTSPURL.GetHashCode();
      if (FPS != 0) hash ^= FPS.GetHashCode();
      if (EncodeType.Length != 0) hash ^= EncodeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Resolution.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Resolution);
      }
      if (RTSPURL.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RTSPURL);
      }
      if (FPS != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FPS);
      }
      if (EncodeType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(EncodeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Resolution.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Resolution);
      }
      if (RTSPURL.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RTSPURL);
      }
      if (FPS != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FPS);
      }
      if (EncodeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EncodeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfileDetail other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Resolution.Length != 0) {
        Resolution = other.Resolution;
      }
      if (other.RTSPURL.Length != 0) {
        RTSPURL = other.RTSPURL;
      }
      if (other.FPS != 0) {
        FPS = other.FPS;
      }
      if (other.EncodeType.Length != 0) {
        EncodeType = other.EncodeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Resolution = input.ReadString();
            break;
          }
          case 26: {
            RTSPURL = input.ReadString();
            break;
          }
          case 32: {
            FPS = input.ReadInt32();
            break;
          }
          case 42: {
            EncodeType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryByProtoTypesRequest : pb::IMessage<QueryByProtoTypesRequest> {
    private static readonly pb::MessageParser<QueryByProtoTypesRequest> _parser = new pb::MessageParser<QueryByProtoTypesRequest>(() => new QueryByProtoTypesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryByProtoTypesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryByProtoTypesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryByProtoTypesRequest(QueryByProtoTypesRequest other) : this() {
      protoTypes_ = other.protoTypes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryByProtoTypesRequest Clone() {
      return new QueryByProtoTypesRequest(this);
    }

    /// <summary>Field number for the "proto_types" field.</summary>
    public const int ProtoTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Manage.ProtoType> _repeated_protoTypes_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Manage.ProtoType) x);
    private readonly pbc::RepeatedField<global::Manage.ProtoType> protoTypes_ = new pbc::RepeatedField<global::Manage.ProtoType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.ProtoType> ProtoTypes {
      get { return protoTypes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryByProtoTypesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryByProtoTypesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!protoTypes_.Equals(other.protoTypes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= protoTypes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      protoTypes_.WriteTo(output, _repeated_protoTypes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += protoTypes_.CalculateSize(_repeated_protoTypes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryByProtoTypesRequest other) {
      if (other == null) {
        return;
      }
      protoTypes_.Add(other.protoTypes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            protoTypes_.AddEntriesFrom(input, _repeated_protoTypes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryByProtoTypesResponse : pb::IMessage<QueryByProtoTypesResponse> {
    private static readonly pb::MessageParser<QueryByProtoTypesResponse> _parser = new pb::MessageParser<QueryByProtoTypesResponse>(() => new QueryByProtoTypesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryByProtoTypesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryByProtoTypesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryByProtoTypesResponse(QueryByProtoTypesResponse other) : this() {
      devices_ = other.devices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryByProtoTypesResponse Clone() {
      return new QueryByProtoTypesResponse(this);
    }

    /// <summary>Field number for the "devices" field.</summary>
    public const int DevicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Manage.SimpleDevice> _repeated_devices_codec
        = pb::FieldCodec.ForMessage(10, global::Manage.SimpleDevice.Parser);
    private readonly pbc::RepeatedField<global::Manage.SimpleDevice> devices_ = new pbc::RepeatedField<global::Manage.SimpleDevice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.SimpleDevice> Devices {
      get { return devices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryByProtoTypesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryByProtoTypesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!devices_.Equals(other.devices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= devices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      devices_.WriteTo(output, _repeated_devices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += devices_.CalculateSize(_repeated_devices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryByProtoTypesResponse other) {
      if (other == null) {
        return;
      }
      devices_.Add(other.devices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            devices_.AddEntriesFrom(input, _repeated_devices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateViewNameRequest : pb::IMessage<UpdateViewNameRequest> {
    private static readonly pb::MessageParser<UpdateViewNameRequest> _parser = new pb::MessageParser<UpdateViewNameRequest>(() => new UpdateViewNameRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateViewNameRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateViewNameRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateViewNameRequest(UpdateViewNameRequest other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateViewNameRequest Clone() {
      return new UpdateViewNameRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateViewNameRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateViewNameRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateViewNameRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryParentDeviceRequest : pb::IMessage<QueryParentDeviceRequest> {
    private static readonly pb::MessageParser<QueryParentDeviceRequest> _parser = new pb::MessageParser<QueryParentDeviceRequest>(() => new QueryParentDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryParentDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryParentDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryParentDeviceRequest(QueryParentDeviceRequest other) : this() {
      childDeviceId_ = other.childDeviceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryParentDeviceRequest Clone() {
      return new QueryParentDeviceRequest(this);
    }

    /// <summary>Field number for the "child_device_id" field.</summary>
    public const int ChildDeviceIdFieldNumber = 1;
    private string childDeviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChildDeviceId {
      get { return childDeviceId_; }
      set {
        childDeviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryParentDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryParentDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChildDeviceId != other.ChildDeviceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChildDeviceId.Length != 0) hash ^= ChildDeviceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChildDeviceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChildDeviceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChildDeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChildDeviceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryParentDeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ChildDeviceId.Length != 0) {
        ChildDeviceId = other.ChildDeviceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChildDeviceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryParentDeviceResponse : pb::IMessage<QueryParentDeviceResponse> {
    private static readonly pb::MessageParser<QueryParentDeviceResponse> _parser = new pb::MessageParser<QueryParentDeviceResponse>(() => new QueryParentDeviceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryParentDeviceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryParentDeviceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryParentDeviceResponse(QueryParentDeviceResponse other) : this() {
      ParentDevice = other.parentDevice_ != null ? other.ParentDevice.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryParentDeviceResponse Clone() {
      return new QueryParentDeviceResponse(this);
    }

    /// <summary>Field number for the "parent_device" field.</summary>
    public const int ParentDeviceFieldNumber = 1;
    private global::Manage.SimpleDevice parentDevice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.SimpleDevice ParentDevice {
      get { return parentDevice_; }
      set {
        parentDevice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryParentDeviceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryParentDeviceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ParentDevice, other.ParentDevice)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (parentDevice_ != null) hash ^= ParentDevice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (parentDevice_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ParentDevice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (parentDevice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParentDevice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryParentDeviceResponse other) {
      if (other == null) {
        return;
      }
      if (other.parentDevice_ != null) {
        if (parentDevice_ == null) {
          parentDevice_ = new global::Manage.SimpleDevice();
        }
        ParentDevice.MergeFrom(other.ParentDevice);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (parentDevice_ == null) {
              parentDevice_ = new global::Manage.SimpleDevice();
            }
            input.ReadMessage(parentDevice_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryChannelRequest : pb::IMessage<QueryChannelRequest> {
    private static readonly pb::MessageParser<QueryChannelRequest> _parser = new pb::MessageParser<QueryChannelRequest>(() => new QueryChannelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryChannelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryChannelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryChannelRequest(QueryChannelRequest other) : this() {
      loginRoleId_ = other.loginRoleId_;
      parentDeviceId_ = other.parentDeviceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryChannelRequest Clone() {
      return new QueryChannelRequest(this);
    }

    /// <summary>Field number for the "login_role_id" field.</summary>
    public const int LoginRoleIdFieldNumber = 1;
    private string loginRoleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginRoleId {
      get { return loginRoleId_; }
      set {
        loginRoleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_device_id" field.</summary>
    public const int ParentDeviceIdFieldNumber = 2;
    private string parentDeviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentDeviceId {
      get { return parentDeviceId_; }
      set {
        parentDeviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryChannelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryChannelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LoginRoleId != other.LoginRoleId) return false;
      if (ParentDeviceId != other.ParentDeviceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LoginRoleId.Length != 0) hash ^= LoginRoleId.GetHashCode();
      if (ParentDeviceId.Length != 0) hash ^= ParentDeviceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginRoleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LoginRoleId);
      }
      if (ParentDeviceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ParentDeviceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginRoleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginRoleId);
      }
      if (ParentDeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentDeviceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryChannelRequest other) {
      if (other == null) {
        return;
      }
      if (other.LoginRoleId.Length != 0) {
        LoginRoleId = other.LoginRoleId;
      }
      if (other.ParentDeviceId.Length != 0) {
        ParentDeviceId = other.ParentDeviceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LoginRoleId = input.ReadString();
            break;
          }
          case 18: {
            ParentDeviceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryChannelResponse : pb::IMessage<QueryChannelResponse> {
    private static readonly pb::MessageParser<QueryChannelResponse> _parser = new pb::MessageParser<QueryChannelResponse>(() => new QueryChannelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryChannelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryChannelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryChannelResponse(QueryChannelResponse other) : this() {
      channelDevices_ = other.channelDevices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryChannelResponse Clone() {
      return new QueryChannelResponse(this);
    }

    /// <summary>Field number for the "channel_devices" field.</summary>
    public const int ChannelDevicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Manage.SimpleDevice> _repeated_channelDevices_codec
        = pb::FieldCodec.ForMessage(10, global::Manage.SimpleDevice.Parser);
    private readonly pbc::RepeatedField<global::Manage.SimpleDevice> channelDevices_ = new pbc::RepeatedField<global::Manage.SimpleDevice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.SimpleDevice> ChannelDevices {
      get { return channelDevices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryChannelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryChannelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channelDevices_.Equals(other.channelDevices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channelDevices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channelDevices_.WriteTo(output, _repeated_channelDevices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channelDevices_.CalculateSize(_repeated_channelDevices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryChannelResponse other) {
      if (other == null) {
        return;
      }
      channelDevices_.Add(other.channelDevices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            channelDevices_.AddEntriesFrom(input, _repeated_channelDevices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class View : pb::IMessage<View> {
    private static readonly pb::MessageParser<View> _parser = new pb::MessageParser<View>(() => new View());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<View> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public View() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public View(View other) : this() {
      guid_ = other.guid_;
      name_ = other.name_;
      description_ = other.description_;
      parentId_ = other.parentId_;
      childViewIds_ = other.childViewIds_.Clone();
      deviceIds_ = other.deviceIds_.Clone();
      ownerId_ = other.ownerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public View Clone() {
      return new View(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private string guid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_id" field.</summary>
    public const int ParentIdFieldNumber = 4;
    private string parentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentId {
      get { return parentId_; }
      set {
        parentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_view_ids" field.</summary>
    public const int ChildViewIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_childViewIds_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> childViewIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ChildViewIds {
      get { return childViewIds_; }
    }

    /// <summary>Field number for the "device_ids" field.</summary>
    public const int DeviceIdsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_deviceIds_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> deviceIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DeviceIds {
      get { return deviceIds_; }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 7;
    private string ownerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as View);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(View other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (ParentId != other.ParentId) return false;
      if(!childViewIds_.Equals(other.childViewIds_)) return false;
      if(!deviceIds_.Equals(other.deviceIds_)) return false;
      if (OwnerId != other.OwnerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (ParentId.Length != 0) hash ^= ParentId.GetHashCode();
      hash ^= childViewIds_.GetHashCode();
      hash ^= deviceIds_.GetHashCode();
      if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (ParentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ParentId);
      }
      childViewIds_.WriteTo(output, _repeated_childViewIds_codec);
      deviceIds_.WriteTo(output, _repeated_deviceIds_codec);
      if (OwnerId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(OwnerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (ParentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentId);
      }
      size += childViewIds_.CalculateSize(_repeated_childViewIds_codec);
      size += deviceIds_.CalculateSize(_repeated_deviceIds_codec);
      if (OwnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(View other) {
      if (other == null) {
        return;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.ParentId.Length != 0) {
        ParentId = other.ParentId;
      }
      childViewIds_.Add(other.childViewIds_);
      deviceIds_.Add(other.deviceIds_);
      if (other.OwnerId.Length != 0) {
        OwnerId = other.OwnerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Guid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            ParentId = input.ReadString();
            break;
          }
          case 42: {
            childViewIds_.AddEntriesFrom(input, _repeated_childViewIds_codec);
            break;
          }
          case 50: {
            deviceIds_.AddEntriesFrom(input, _repeated_deviceIds_codec);
            break;
          }
          case 58: {
            OwnerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleView : pb::IMessage<SimpleView> {
    private static readonly pb::MessageParser<SimpleView> _parser = new pb::MessageParser<SimpleView>(() => new SimpleView());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleView(SimpleView other) : this() {
      guid_ = other.guid_;
      name_ = other.name_;
      description_ = other.description_;
      childSimpleViews_ = other.childSimpleViews_.Clone();
      devices_ = other.devices_.Clone();
      ownerId_ = other.ownerId_;
      totalDeviceCount_ = other.totalDeviceCount_;
      totalOnlineCount_ = other.totalOnlineCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleView Clone() {
      return new SimpleView(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private string guid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_simple_views" field.</summary>
    public const int ChildSimpleViewsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Manage.SimpleView> _repeated_childSimpleViews_codec
        = pb::FieldCodec.ForMessage(34, global::Manage.SimpleView.Parser);
    private readonly pbc::RepeatedField<global::Manage.SimpleView> childSimpleViews_ = new pbc::RepeatedField<global::Manage.SimpleView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.SimpleView> ChildSimpleViews {
      get { return childSimpleViews_; }
    }

    /// <summary>Field number for the "devices" field.</summary>
    public const int DevicesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Manage.SimpleDevice> _repeated_devices_codec
        = pb::FieldCodec.ForMessage(42, global::Manage.SimpleDevice.Parser);
    private readonly pbc::RepeatedField<global::Manage.SimpleDevice> devices_ = new pbc::RepeatedField<global::Manage.SimpleDevice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.SimpleDevice> Devices {
      get { return devices_; }
    }

    /// <summary>Field number for the "owner_id" field.</summary>
    public const int OwnerIdFieldNumber = 6;
    private string ownerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_device_count" field.</summary>
    public const int TotalDeviceCountFieldNumber = 7;
    private int totalDeviceCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalDeviceCount {
      get { return totalDeviceCount_; }
      set {
        totalDeviceCount_ = value;
      }
    }

    /// <summary>Field number for the "total_online_count" field.</summary>
    public const int TotalOnlineCountFieldNumber = 8;
    private int totalOnlineCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalOnlineCount {
      get { return totalOnlineCount_; }
      set {
        totalOnlineCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if(!childSimpleViews_.Equals(other.childSimpleViews_)) return false;
      if(!devices_.Equals(other.devices_)) return false;
      if (OwnerId != other.OwnerId) return false;
      if (TotalDeviceCount != other.TotalDeviceCount) return false;
      if (TotalOnlineCount != other.TotalOnlineCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= childSimpleViews_.GetHashCode();
      hash ^= devices_.GetHashCode();
      if (OwnerId.Length != 0) hash ^= OwnerId.GetHashCode();
      if (TotalDeviceCount != 0) hash ^= TotalDeviceCount.GetHashCode();
      if (TotalOnlineCount != 0) hash ^= TotalOnlineCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      childSimpleViews_.WriteTo(output, _repeated_childSimpleViews_codec);
      devices_.WriteTo(output, _repeated_devices_codec);
      if (OwnerId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OwnerId);
      }
      if (TotalDeviceCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TotalDeviceCount);
      }
      if (TotalOnlineCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(TotalOnlineCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += childSimpleViews_.CalculateSize(_repeated_childSimpleViews_codec);
      size += devices_.CalculateSize(_repeated_devices_codec);
      if (OwnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerId);
      }
      if (TotalDeviceCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalDeviceCount);
      }
      if (TotalOnlineCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalOnlineCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleView other) {
      if (other == null) {
        return;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      childSimpleViews_.Add(other.childSimpleViews_);
      devices_.Add(other.devices_);
      if (other.OwnerId.Length != 0) {
        OwnerId = other.OwnerId;
      }
      if (other.TotalDeviceCount != 0) {
        TotalDeviceCount = other.TotalDeviceCount;
      }
      if (other.TotalOnlineCount != 0) {
        TotalOnlineCount = other.TotalOnlineCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Guid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            childSimpleViews_.AddEntriesFrom(input, _repeated_childSimpleViews_codec);
            break;
          }
          case 42: {
            devices_.AddEntriesFrom(input, _repeated_devices_codec);
            break;
          }
          case 50: {
            OwnerId = input.ReadString();
            break;
          }
          case 56: {
            TotalDeviceCount = input.ReadInt32();
            break;
          }
          case 64: {
            TotalOnlineCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyValuePair : pb::IMessage<KeyValuePair> {
    private static readonly pb::MessageParser<KeyValuePair> _parser = new pb::MessageParser<KeyValuePair>(() => new KeyValuePair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyValuePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePair(KeyValuePair other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyValuePair Clone() {
      return new KeyValuePair(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyValuePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyValuePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyValuePair other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddViewRequest : pb::IMessage<AddViewRequest> {
    private static readonly pb::MessageParser<AddViewRequest> _parser = new pb::MessageParser<AddViewRequest>(() => new AddViewRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddViewRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddViewRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddViewRequest(AddViewRequest other) : this() {
      views_ = other.views_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddViewRequest Clone() {
      return new AddViewRequest(this);
    }

    /// <summary>Field number for the "views" field.</summary>
    public const int ViewsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Manage.View> _repeated_views_codec
        = pb::FieldCodec.ForMessage(10, global::Manage.View.Parser);
    private readonly pbc::RepeatedField<global::Manage.View> views_ = new pbc::RepeatedField<global::Manage.View>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.View> Views {
      get { return views_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddViewRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddViewRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!views_.Equals(other.views_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= views_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      views_.WriteTo(output, _repeated_views_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += views_.CalculateSize(_repeated_views_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddViewRequest other) {
      if (other == null) {
        return;
      }
      views_.Add(other.views_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            views_.AddEntriesFrom(input, _repeated_views_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddViewResponse : pb::IMessage<AddViewResponse> {
    private static readonly pb::MessageParser<AddViewResponse> _parser = new pb::MessageParser<AddViewResponse>(() => new AddViewResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddViewResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddViewResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddViewResponse(AddViewResponse other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddViewResponse Clone() {
      return new AddViewResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Manage.OP_RESULT_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.OP_RESULT_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddViewResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddViewResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddViewResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Manage.OP_RESULT_STATUS) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateViewRequest : pb::IMessage<UpdateViewRequest> {
    private static readonly pb::MessageParser<UpdateViewRequest> _parser = new pb::MessageParser<UpdateViewRequest>(() => new UpdateViewRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateViewRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateViewRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateViewRequest(UpdateViewRequest other) : this() {
      views_ = other.views_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateViewRequest Clone() {
      return new UpdateViewRequest(this);
    }

    /// <summary>Field number for the "views" field.</summary>
    public const int ViewsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Manage.View> _repeated_views_codec
        = pb::FieldCodec.ForMessage(10, global::Manage.View.Parser);
    private readonly pbc::RepeatedField<global::Manage.View> views_ = new pbc::RepeatedField<global::Manage.View>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.View> Views {
      get { return views_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateViewRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateViewRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!views_.Equals(other.views_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= views_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      views_.WriteTo(output, _repeated_views_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += views_.CalculateSize(_repeated_views_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateViewRequest other) {
      if (other == null) {
        return;
      }
      views_.Add(other.views_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            views_.AddEntriesFrom(input, _repeated_views_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateViewResponse : pb::IMessage<UpdateViewResponse> {
    private static readonly pb::MessageParser<UpdateViewResponse> _parser = new pb::MessageParser<UpdateViewResponse>(() => new UpdateViewResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateViewResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateViewResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateViewResponse(UpdateViewResponse other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateViewResponse Clone() {
      return new UpdateViewResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Manage.OP_RESULT_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.OP_RESULT_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateViewResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateViewResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateViewResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Manage.OP_RESULT_STATUS) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteViewRequest : pb::IMessage<DeleteViewRequest> {
    private static readonly pb::MessageParser<DeleteViewRequest> _parser = new pb::MessageParser<DeleteViewRequest>(() => new DeleteViewRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteViewRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteViewRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteViewRequest(DeleteViewRequest other) : this() {
      viewIds_ = other.viewIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteViewRequest Clone() {
      return new DeleteViewRequest(this);
    }

    /// <summary>Field number for the "view_ids" field.</summary>
    public const int ViewIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_viewIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> viewIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ViewIds {
      get { return viewIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteViewRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteViewRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!viewIds_.Equals(other.viewIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= viewIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      viewIds_.WriteTo(output, _repeated_viewIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += viewIds_.CalculateSize(_repeated_viewIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteViewRequest other) {
      if (other == null) {
        return;
      }
      viewIds_.Add(other.viewIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            viewIds_.AddEntriesFrom(input, _repeated_viewIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteViewResponse : pb::IMessage<DeleteViewResponse> {
    private static readonly pb::MessageParser<DeleteViewResponse> _parser = new pb::MessageParser<DeleteViewResponse>(() => new DeleteViewResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteViewResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteViewResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteViewResponse(DeleteViewResponse other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteViewResponse Clone() {
      return new DeleteViewResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Manage.OP_RESULT_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.OP_RESULT_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteViewResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteViewResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteViewResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Manage.OP_RESULT_STATUS) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuerySimpleRequest : pb::IMessage<QuerySimpleRequest> {
    private static readonly pb::MessageParser<QuerySimpleRequest> _parser = new pb::MessageParser<QuerySimpleRequest>(() => new QuerySimpleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuerySimpleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleRequest(QuerySimpleRequest other) : this() {
      userId_ = other.userId_;
      viewId_ = other.viewId_;
      orderby_ = other.orderby_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleRequest Clone() {
      return new QuerySimpleRequest(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view_id" field.</summary>
    public const int ViewIdFieldNumber = 2;
    private string viewId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ViewId {
      get { return viewId_; }
      set {
        viewId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "orderby" field.</summary>
    public const int OrderbyFieldNumber = 3;
    private string orderby_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Orderby {
      get { return orderby_; }
      set {
        orderby_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuerySimpleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuerySimpleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ViewId != other.ViewId) return false;
      if (Orderby != other.Orderby) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (ViewId.Length != 0) hash ^= ViewId.GetHashCode();
      if (Orderby.Length != 0) hash ^= Orderby.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (ViewId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ViewId);
      }
      if (Orderby.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Orderby);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (ViewId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ViewId);
      }
      if (Orderby.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Orderby);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuerySimpleRequest other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.ViewId.Length != 0) {
        ViewId = other.ViewId;
      }
      if (other.Orderby.Length != 0) {
        Orderby = other.Orderby;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            ViewId = input.ReadString();
            break;
          }
          case 26: {
            Orderby = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuerySimpleDevicesRequest : pb::IMessage<QuerySimpleDevicesRequest> {
    private static readonly pb::MessageParser<QuerySimpleDevicesRequest> _parser = new pb::MessageParser<QuerySimpleDevicesRequest>(() => new QuerySimpleDevicesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuerySimpleDevicesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleDevicesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleDevicesRequest(QuerySimpleDevicesRequest other) : this() {
      deviceIds_ = other.deviceIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleDevicesRequest Clone() {
      return new QuerySimpleDevicesRequest(this);
    }

    /// <summary>Field number for the "device_ids" field.</summary>
    public const int DeviceIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_deviceIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> deviceIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DeviceIds {
      get { return deviceIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuerySimpleDevicesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuerySimpleDevicesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deviceIds_.Equals(other.deviceIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deviceIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deviceIds_.WriteTo(output, _repeated_deviceIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deviceIds_.CalculateSize(_repeated_deviceIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuerySimpleDevicesRequest other) {
      if (other == null) {
        return;
      }
      deviceIds_.Add(other.deviceIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            deviceIds_.AddEntriesFrom(input, _repeated_deviceIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuerySimpleDevicesResponse : pb::IMessage<QuerySimpleDevicesResponse> {
    private static readonly pb::MessageParser<QuerySimpleDevicesResponse> _parser = new pb::MessageParser<QuerySimpleDevicesResponse>(() => new QuerySimpleDevicesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuerySimpleDevicesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleDevicesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleDevicesResponse(QuerySimpleDevicesResponse other) : this() {
      status_ = other.status_;
      simpleDevices_ = other.simpleDevices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleDevicesResponse Clone() {
      return new QuerySimpleDevicesResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Manage.SEARCH_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.SEARCH_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "simple_devices" field.</summary>
    public const int SimpleDevicesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Manage.SimpleDevice> _repeated_simpleDevices_codec
        = pb::FieldCodec.ForMessage(18, global::Manage.SimpleDevice.Parser);
    private readonly pbc::RepeatedField<global::Manage.SimpleDevice> simpleDevices_ = new pbc::RepeatedField<global::Manage.SimpleDevice>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.SimpleDevice> SimpleDevices {
      get { return simpleDevices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuerySimpleDevicesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuerySimpleDevicesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!simpleDevices_.Equals(other.simpleDevices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= simpleDevices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      simpleDevices_.WriteTo(output, _repeated_simpleDevices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += simpleDevices_.CalculateSize(_repeated_simpleDevices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuerySimpleDevicesResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      simpleDevices_.Add(other.simpleDevices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Manage.SEARCH_STATUS) input.ReadEnum();
            break;
          }
          case 18: {
            simpleDevices_.AddEntriesFrom(input, _repeated_simpleDevices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FuzzyQueryDeviceRequest : pb::IMessage<FuzzyQueryDeviceRequest> {
    private static readonly pb::MessageParser<FuzzyQueryDeviceRequest> _parser = new pb::MessageParser<FuzzyQueryDeviceRequest>(() => new FuzzyQueryDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FuzzyQueryDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuzzyQueryDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuzzyQueryDeviceRequest(FuzzyQueryDeviceRequest other) : this() {
      loginRoleId_ = other.loginRoleId_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuzzyQueryDeviceRequest Clone() {
      return new FuzzyQueryDeviceRequest(this);
    }

    /// <summary>Field number for the "login_role_id" field.</summary>
    public const int LoginRoleIdFieldNumber = 1;
    private string loginRoleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginRoleId {
      get { return loginRoleId_; }
      set {
        loginRoleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FuzzyQueryDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FuzzyQueryDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LoginRoleId != other.LoginRoleId) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LoginRoleId.Length != 0) hash ^= LoginRoleId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginRoleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LoginRoleId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginRoleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginRoleId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FuzzyQueryDeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.LoginRoleId.Length != 0) {
        LoginRoleId = other.LoginRoleId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LoginRoleId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FuzzyQueryDeviceResponse : pb::IMessage<FuzzyQueryDeviceResponse> {
    private static readonly pb::MessageParser<FuzzyQueryDeviceResponse> _parser = new pb::MessageParser<FuzzyQueryDeviceResponse>(() => new FuzzyQueryDeviceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FuzzyQueryDeviceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuzzyQueryDeviceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuzzyQueryDeviceResponse(FuzzyQueryDeviceResponse other) : this() {
      devices_ = other.devices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FuzzyQueryDeviceResponse Clone() {
      return new FuzzyQueryDeviceResponse(this);
    }

    /// <summary>Field number for the "devices" field.</summary>
    public const int DevicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Manage.KeyValuePair> _repeated_devices_codec
        = pb::FieldCodec.ForMessage(10, global::Manage.KeyValuePair.Parser);
    private readonly pbc::RepeatedField<global::Manage.KeyValuePair> devices_ = new pbc::RepeatedField<global::Manage.KeyValuePair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.KeyValuePair> Devices {
      get { return devices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FuzzyQueryDeviceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FuzzyQueryDeviceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!devices_.Equals(other.devices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= devices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      devices_.WriteTo(output, _repeated_devices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += devices_.CalculateSize(_repeated_devices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FuzzyQueryDeviceResponse other) {
      if (other == null) {
        return;
      }
      devices_.Add(other.devices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            devices_.AddEntriesFrom(input, _repeated_devices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuerySimpleDeviceRequest : pb::IMessage<QuerySimpleDeviceRequest> {
    private static readonly pb::MessageParser<QuerySimpleDeviceRequest> _parser = new pb::MessageParser<QuerySimpleDeviceRequest>(() => new QuerySimpleDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuerySimpleDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleDeviceRequest(QuerySimpleDeviceRequest other) : this() {
      deviceId_ = other.deviceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleDeviceRequest Clone() {
      return new QuerySimpleDeviceRequest(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuerySimpleDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuerySimpleDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuerySimpleDeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeviceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuerySimpleDeviceResponse : pb::IMessage<QuerySimpleDeviceResponse> {
    private static readonly pb::MessageParser<QuerySimpleDeviceResponse> _parser = new pb::MessageParser<QuerySimpleDeviceResponse>(() => new QuerySimpleDeviceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuerySimpleDeviceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleDeviceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleDeviceResponse(QuerySimpleDeviceResponse other) : this() {
      status_ = other.status_;
      SimpleDevice = other.simpleDevice_ != null ? other.SimpleDevice.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleDeviceResponse Clone() {
      return new QuerySimpleDeviceResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Manage.SEARCH_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.SEARCH_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "simple_device" field.</summary>
    public const int SimpleDeviceFieldNumber = 2;
    private global::Manage.SimpleDevice simpleDevice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.SimpleDevice SimpleDevice {
      get { return simpleDevice_; }
      set {
        simpleDevice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuerySimpleDeviceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuerySimpleDeviceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(SimpleDevice, other.SimpleDevice)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (simpleDevice_ != null) hash ^= SimpleDevice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (simpleDevice_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SimpleDevice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (simpleDevice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleDevice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuerySimpleDeviceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.simpleDevice_ != null) {
        if (simpleDevice_ == null) {
          simpleDevice_ = new global::Manage.SimpleDevice();
        }
        SimpleDevice.MergeFrom(other.SimpleDevice);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Manage.SEARCH_STATUS) input.ReadEnum();
            break;
          }
          case 18: {
            if (simpleDevice_ == null) {
              simpleDevice_ = new global::Manage.SimpleDevice();
            }
            input.ReadMessage(simpleDevice_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuerySimpleViewResponse : pb::IMessage<QuerySimpleViewResponse> {
    private static readonly pb::MessageParser<QuerySimpleViewResponse> _parser = new pb::MessageParser<QuerySimpleViewResponse>(() => new QuerySimpleViewResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuerySimpleViewResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleViewResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleViewResponse(QuerySimpleViewResponse other) : this() {
      status_ = other.status_;
      simpleViews_ = other.simpleViews_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuerySimpleViewResponse Clone() {
      return new QuerySimpleViewResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Manage.SEARCH_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.SEARCH_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "simple_views" field.</summary>
    public const int SimpleViewsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Manage.SimpleView> _repeated_simpleViews_codec
        = pb::FieldCodec.ForMessage(18, global::Manage.SimpleView.Parser);
    private readonly pbc::RepeatedField<global::Manage.SimpleView> simpleViews_ = new pbc::RepeatedField<global::Manage.SimpleView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.SimpleView> SimpleViews {
      get { return simpleViews_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuerySimpleViewResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuerySimpleViewResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!simpleViews_.Equals(other.simpleViews_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= simpleViews_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      simpleViews_.WriteTo(output, _repeated_simpleViews_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += simpleViews_.CalculateSize(_repeated_simpleViews_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuerySimpleViewResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      simpleViews_.Add(other.simpleViews_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Manage.SEARCH_STATUS) input.ReadEnum();
            break;
          }
          case 18: {
            simpleViews_.AddEntriesFrom(input, _repeated_simpleViews_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Device : pb::IMessage<Device> {
    private static readonly pb::MessageParser<Device> _parser = new pb::MessageParser<Device>(() => new Device());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Device> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Device() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Device(Device other) : this() {
      guid_ = other.guid_;
      name_ = other.name_;
      iP_ = other.iP_;
      port_ = other.port_;
      protocolType_ = other.protocolType_;
      description_ = other.description_;
      geoLong_ = other.geoLong_;
      geoLat_ = other.geoLat_;
      ptzType_ = other.ptzType_;
      gBID_ = other.gBID_;
      gBParentID_ = other.gBParentID_;
      MediaDetail = other.mediaDetail_ != null ? other.MediaDetail.Clone() : null;
      loginUser_ = other.loginUser_.Clone();
      tag_ = other.tag_.Clone();
      mediaSrcType_ = other.mediaSrcType_.Clone();
      parentID_ = other.parentID_;
      shapeType_ = other.shapeType_;
      languageFormatShapeType_ = other.languageFormatShapeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Device Clone() {
      return new Device(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private string guid_ = "";
    /// <summary>
    ///device的guid 主键
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IP" field.</summary>
    public const int IPFieldNumber = 3;
    private string iP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IP {
      get { return iP_; }
      set {
        iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "protocol_type" field.</summary>
    public const int ProtocolTypeFieldNumber = 5;
    private global::Manage.ProtoType protocolType_ = 0;
    /// <summary>
    ///用以区别设备接入时采用的协议类型,必须存储
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.ProtoType ProtocolType {
      get { return protocolType_; }
      set {
        protocolType_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "geo_long" field.</summary>
    public const int GeoLongFieldNumber = 7;
    private double geoLong_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GeoLong {
      get { return geoLong_; }
      set {
        geoLong_ = value;
      }
    }

    /// <summary>Field number for the "geo_lat" field.</summary>
    public const int GeoLatFieldNumber = 8;
    private double geoLat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GeoLat {
      get { return geoLat_; }
      set {
        geoLat_ = value;
      }
    }

    /// <summary>Field number for the "ptz_type" field.</summary>
    public const int PtzTypeFieldNumber = 9;
    private uint ptzType_;
    /// <summary>
    ///PTZ类型,      
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PtzType {
      get { return ptzType_; }
      set {
        ptzType_ = value;
      }
    }

    /// <summary>Field number for the "GB_ID" field.</summary>
    public const int GBIDFieldNumber = 10;
    private string gBID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GBID {
      get { return gBID_; }
      set {
        gBID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GB_Parent_ID" field.</summary>
    public const int GBParentIDFieldNumber = 11;
    private string gBParentID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GBParentID {
      get { return gBParentID_; }
      set {
        gBParentID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "media_detail" field.</summary>
    public const int MediaDetailFieldNumber = 12;
    private global::Manage.MediaInfo mediaDetail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.MediaInfo MediaDetail {
      get { return mediaDetail_; }
      set {
        mediaDetail_ = value;
      }
    }

    /// <summary>Field number for the "login_user" field.</summary>
    public const int LoginUserFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Manage.LoginUser> _repeated_loginUser_codec
        = pb::FieldCodec.ForMessage(106, global::Manage.LoginUser.Parser);
    private readonly pbc::RepeatedField<global::Manage.LoginUser> loginUser_ = new pbc::RepeatedField<global::Manage.LoginUser>();
    /// <summary>
    ///登陆设备的用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.LoginUser> LoginUser {
      get { return loginUser_; }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_tag_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> tag_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///对设备做的标注，比如打个标签，用于检索和参数携带，允许多个标注
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tag {
      get { return tag_; }
    }

    /// <summary>Field number for the "media_srcType" field.</summary>
    public const int MediaSrcTypeFieldNumber = 15;
    private static readonly pb::FieldCodec<uint> _repeated_mediaSrcType_codec
        = pb::FieldCodec.ForUInt32(122);
    private readonly pbc::RepeatedField<uint> mediaSrcType_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///设备的提供数据类型（提供视频/音频/文本数据/二进制数据包，0 for nil ,1 for video 2 for audio 3 for binary
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> MediaSrcType {
      get { return mediaSrcType_; }
    }

    /// <summary>Field number for the "parent_ID" field.</summary>
    public const int ParentIDFieldNumber = 16;
    private string parentID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentID {
      get { return parentID_; }
      set {
        parentID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shape_type" field.</summary>
    public const int ShapeTypeFieldNumber = 17;
    private global::Manage.ShapeType shapeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.ShapeType ShapeType {
      get { return shapeType_; }
      set {
        shapeType_ = value;
      }
    }

    /// <summary>Field number for the "language_format_shape_type" field.</summary>
    public const int LanguageFormatShapeTypeFieldNumber = 18;
    private string languageFormatShapeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LanguageFormatShapeType {
      get { return languageFormatShapeType_; }
      set {
        languageFormatShapeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Device);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Device other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Name != other.Name) return false;
      if (IP != other.IP) return false;
      if (Port != other.Port) return false;
      if (ProtocolType != other.ProtocolType) return false;
      if (Description != other.Description) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GeoLong, other.GeoLong)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GeoLat, other.GeoLat)) return false;
      if (PtzType != other.PtzType) return false;
      if (GBID != other.GBID) return false;
      if (GBParentID != other.GBParentID) return false;
      if (!object.Equals(MediaDetail, other.MediaDetail)) return false;
      if(!loginUser_.Equals(other.loginUser_)) return false;
      if(!tag_.Equals(other.tag_)) return false;
      if(!mediaSrcType_.Equals(other.mediaSrcType_)) return false;
      if (ParentID != other.ParentID) return false;
      if (ShapeType != other.ShapeType) return false;
      if (LanguageFormatShapeType != other.LanguageFormatShapeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IP.Length != 0) hash ^= IP.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ProtocolType != 0) hash ^= ProtocolType.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (GeoLong != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GeoLong);
      if (GeoLat != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GeoLat);
      if (PtzType != 0) hash ^= PtzType.GetHashCode();
      if (GBID.Length != 0) hash ^= GBID.GetHashCode();
      if (GBParentID.Length != 0) hash ^= GBParentID.GetHashCode();
      if (mediaDetail_ != null) hash ^= MediaDetail.GetHashCode();
      hash ^= loginUser_.GetHashCode();
      hash ^= tag_.GetHashCode();
      hash ^= mediaSrcType_.GetHashCode();
      if (ParentID.Length != 0) hash ^= ParentID.GetHashCode();
      if (ShapeType != 0) hash ^= ShapeType.GetHashCode();
      if (LanguageFormatShapeType.Length != 0) hash ^= LanguageFormatShapeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(IP);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Port);
      }
      if (ProtocolType != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ProtocolType);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (GeoLong != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(GeoLong);
      }
      if (GeoLat != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(GeoLat);
      }
      if (PtzType != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(PtzType);
      }
      if (GBID.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(GBID);
      }
      if (GBParentID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(GBParentID);
      }
      if (mediaDetail_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(MediaDetail);
      }
      loginUser_.WriteTo(output, _repeated_loginUser_codec);
      tag_.WriteTo(output, _repeated_tag_codec);
      mediaSrcType_.WriteTo(output, _repeated_mediaSrcType_codec);
      if (ParentID.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ParentID);
      }
      if (ShapeType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) ShapeType);
      }
      if (LanguageFormatShapeType.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(LanguageFormatShapeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (ProtocolType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProtocolType);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (GeoLong != 0D) {
        size += 1 + 8;
      }
      if (GeoLat != 0D) {
        size += 1 + 8;
      }
      if (PtzType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PtzType);
      }
      if (GBID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GBID);
      }
      if (GBParentID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GBParentID);
      }
      if (mediaDetail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MediaDetail);
      }
      size += loginUser_.CalculateSize(_repeated_loginUser_codec);
      size += tag_.CalculateSize(_repeated_tag_codec);
      size += mediaSrcType_.CalculateSize(_repeated_mediaSrcType_codec);
      if (ParentID.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ParentID);
      }
      if (ShapeType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShapeType);
      }
      if (LanguageFormatShapeType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LanguageFormatShapeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Device other) {
      if (other == null) {
        return;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IP.Length != 0) {
        IP = other.IP;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ProtocolType != 0) {
        ProtocolType = other.ProtocolType;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.GeoLong != 0D) {
        GeoLong = other.GeoLong;
      }
      if (other.GeoLat != 0D) {
        GeoLat = other.GeoLat;
      }
      if (other.PtzType != 0) {
        PtzType = other.PtzType;
      }
      if (other.GBID.Length != 0) {
        GBID = other.GBID;
      }
      if (other.GBParentID.Length != 0) {
        GBParentID = other.GBParentID;
      }
      if (other.mediaDetail_ != null) {
        if (mediaDetail_ == null) {
          mediaDetail_ = new global::Manage.MediaInfo();
        }
        MediaDetail.MergeFrom(other.MediaDetail);
      }
      loginUser_.Add(other.loginUser_);
      tag_.Add(other.tag_);
      mediaSrcType_.Add(other.mediaSrcType_);
      if (other.ParentID.Length != 0) {
        ParentID = other.ParentID;
      }
      if (other.ShapeType != 0) {
        ShapeType = other.ShapeType;
      }
      if (other.LanguageFormatShapeType.Length != 0) {
        LanguageFormatShapeType = other.LanguageFormatShapeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Guid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            IP = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadUInt32();
            break;
          }
          case 40: {
            protocolType_ = (global::Manage.ProtoType) input.ReadEnum();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 57: {
            GeoLong = input.ReadDouble();
            break;
          }
          case 65: {
            GeoLat = input.ReadDouble();
            break;
          }
          case 72: {
            PtzType = input.ReadUInt32();
            break;
          }
          case 82: {
            GBID = input.ReadString();
            break;
          }
          case 90: {
            GBParentID = input.ReadString();
            break;
          }
          case 98: {
            if (mediaDetail_ == null) {
              mediaDetail_ = new global::Manage.MediaInfo();
            }
            input.ReadMessage(mediaDetail_);
            break;
          }
          case 106: {
            loginUser_.AddEntriesFrom(input, _repeated_loginUser_codec);
            break;
          }
          case 114: {
            tag_.AddEntriesFrom(input, _repeated_tag_codec);
            break;
          }
          case 122:
          case 120: {
            mediaSrcType_.AddEntriesFrom(input, _repeated_mediaSrcType_codec);
            break;
          }
          case 130: {
            ParentID = input.ReadString();
            break;
          }
          case 136: {
            shapeType_ = (global::Manage.ShapeType) input.ReadEnum();
            break;
          }
          case 146: {
            LanguageFormatShapeType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SimpleDevice : pb::IMessage<SimpleDevice> {
    private static readonly pb::MessageParser<SimpleDevice> _parser = new pb::MessageParser<SimpleDevice>(() => new SimpleDevice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SimpleDevice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleDevice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleDevice(SimpleDevice other) : this() {
      guid_ = other.guid_;
      name_ = other.name_;
      protocolType_ = other.protocolType_;
      iP_ = other.iP_;
      port_ = other.port_;
      gBID_ = other.gBID_;
      gBParentID_ = other.gBParentID_;
      users_ = other.users_.Clone();
      deviceId_ = other.deviceId_;
      channelId_ = other.channelId_;
      primaryId_ = other.primaryId_;
      subId_ = other.subId_;
      parentId_ = other.parentId_;
      shapeType_ = other.shapeType_;
      Profile = other.profile_ != null ? other.Profile.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SimpleDevice Clone() {
      return new SimpleDevice(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private string guid_ = "";
    /// <summary>
    ///device的guid 主键
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol_type" field.</summary>
    public const int ProtocolTypeFieldNumber = 3;
    private global::Manage.ProtoType protocolType_ = 0;
    /// <summary>
    ///用以区别设备接入时采用的协议类型,必须存储
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.ProtoType ProtocolType {
      get { return protocolType_; }
      set {
        protocolType_ = value;
      }
    }

    /// <summary>Field number for the "IP" field.</summary>
    public const int IPFieldNumber = 4;
    private string iP_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IP {
      get { return iP_; }
      set {
        iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 5;
    private uint port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "GB_ID" field.</summary>
    public const int GBIDFieldNumber = 6;
    private string gBID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GBID {
      get { return gBID_; }
      set {
        gBID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GB_Parent_ID" field.</summary>
    public const int GBParentIDFieldNumber = 7;
    private string gBParentID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GBParentID {
      get { return gBParentID_; }
      set {
        gBParentID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Manage.LoginUser> _repeated_users_codec
        = pb::FieldCodec.ForMessage(66, global::Manage.LoginUser.Parser);
    private readonly pbc::RepeatedField<global::Manage.LoginUser> users_ = new pbc::RepeatedField<global::Manage.LoginUser>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.LoginUser> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 9;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 10;
    private string channelId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_id" field.</summary>
    public const int PrimaryIdFieldNumber = 11;
    private string primaryId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrimaryId {
      get { return primaryId_; }
      set {
        primaryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sub_id" field.</summary>
    public const int SubIdFieldNumber = 12;
    private string subId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubId {
      get { return subId_; }
      set {
        subId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parent_id" field.</summary>
    public const int ParentIdFieldNumber = 13;
    private string parentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentId {
      get { return parentId_; }
      set {
        parentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shape_type" field.</summary>
    public const int ShapeTypeFieldNumber = 14;
    private global::Manage.ShapeType shapeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.ShapeType ShapeType {
      get { return shapeType_; }
      set {
        shapeType_ = value;
      }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 15;
    private global::Manage.Profile profile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.Profile Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SimpleDevice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SimpleDevice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Name != other.Name) return false;
      if (ProtocolType != other.ProtocolType) return false;
      if (IP != other.IP) return false;
      if (Port != other.Port) return false;
      if (GBID != other.GBID) return false;
      if (GBParentID != other.GBParentID) return false;
      if(!users_.Equals(other.users_)) return false;
      if (DeviceId != other.DeviceId) return false;
      if (ChannelId != other.ChannelId) return false;
      if (PrimaryId != other.PrimaryId) return false;
      if (SubId != other.SubId) return false;
      if (ParentId != other.ParentId) return false;
      if (ShapeType != other.ShapeType) return false;
      if (!object.Equals(Profile, other.Profile)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ProtocolType != 0) hash ^= ProtocolType.GetHashCode();
      if (IP.Length != 0) hash ^= IP.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (GBID.Length != 0) hash ^= GBID.GetHashCode();
      if (GBParentID.Length != 0) hash ^= GBParentID.GetHashCode();
      hash ^= users_.GetHashCode();
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (ChannelId.Length != 0) hash ^= ChannelId.GetHashCode();
      if (PrimaryId.Length != 0) hash ^= PrimaryId.GetHashCode();
      if (SubId.Length != 0) hash ^= SubId.GetHashCode();
      if (ParentId.Length != 0) hash ^= ParentId.GetHashCode();
      if (ShapeType != 0) hash ^= ShapeType.GetHashCode();
      if (profile_ != null) hash ^= Profile.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ProtocolType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ProtocolType);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(IP);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Port);
      }
      if (GBID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(GBID);
      }
      if (GBParentID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(GBParentID);
      }
      users_.WriteTo(output, _repeated_users_codec);
      if (DeviceId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DeviceId);
      }
      if (ChannelId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ChannelId);
      }
      if (PrimaryId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PrimaryId);
      }
      if (SubId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(SubId);
      }
      if (ParentId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ParentId);
      }
      if (ShapeType != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) ShapeType);
      }
      if (profile_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Profile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ProtocolType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProtocolType);
      }
      if (IP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Port);
      }
      if (GBID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GBID);
      }
      if (GBParentID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GBParentID);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (ChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (PrimaryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryId);
      }
      if (SubId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubId);
      }
      if (ParentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentId);
      }
      if (ShapeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ShapeType);
      }
      if (profile_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Profile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SimpleDevice other) {
      if (other == null) {
        return;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ProtocolType != 0) {
        ProtocolType = other.ProtocolType;
      }
      if (other.IP.Length != 0) {
        IP = other.IP;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.GBID.Length != 0) {
        GBID = other.GBID;
      }
      if (other.GBParentID.Length != 0) {
        GBParentID = other.GBParentID;
      }
      users_.Add(other.users_);
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.ChannelId.Length != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.PrimaryId.Length != 0) {
        PrimaryId = other.PrimaryId;
      }
      if (other.SubId.Length != 0) {
        SubId = other.SubId;
      }
      if (other.ParentId.Length != 0) {
        ParentId = other.ParentId;
      }
      if (other.ShapeType != 0) {
        ShapeType = other.ShapeType;
      }
      if (other.profile_ != null) {
        if (profile_ == null) {
          profile_ = new global::Manage.Profile();
        }
        Profile.MergeFrom(other.Profile);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Guid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            protocolType_ = (global::Manage.ProtoType) input.ReadEnum();
            break;
          }
          case 34: {
            IP = input.ReadString();
            break;
          }
          case 40: {
            Port = input.ReadUInt32();
            break;
          }
          case 50: {
            GBID = input.ReadString();
            break;
          }
          case 58: {
            GBParentID = input.ReadString();
            break;
          }
          case 66: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 74: {
            DeviceId = input.ReadString();
            break;
          }
          case 82: {
            ChannelId = input.ReadString();
            break;
          }
          case 90: {
            PrimaryId = input.ReadString();
            break;
          }
          case 98: {
            SubId = input.ReadString();
            break;
          }
          case 106: {
            ParentId = input.ReadString();
            break;
          }
          case 112: {
            shapeType_ = (global::Manage.ShapeType) input.ReadEnum();
            break;
          }
          case 122: {
            if (profile_ == null) {
              profile_ = new global::Manage.Profile();
            }
            input.ReadMessage(profile_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginUser : pb::IMessage<LoginUser> {
    private static readonly pb::MessageParser<LoginUser> _parser = new pb::MessageParser<LoginUser>(() => new LoginUser());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginUser(LoginUser other) : this() {
      loginName_ = other.loginName_;
      loginPwd_ = other.loginPwd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginUser Clone() {
      return new LoginUser(this);
    }

    /// <summary>Field number for the "login_name" field.</summary>
    public const int LoginNameFieldNumber = 1;
    private string loginName_ = "";
    /// <summary>
    ///登陆设备所需要的用户名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginName {
      get { return loginName_; }
      set {
        loginName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "login_pwd" field.</summary>
    public const int LoginPwdFieldNumber = 2;
    private string loginPwd_ = "";
    /// <summary>
    ///登陆设备所需要的密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginPwd {
      get { return loginPwd_; }
      set {
        loginPwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LoginName != other.LoginName) return false;
      if (LoginPwd != other.LoginPwd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LoginName.Length != 0) hash ^= LoginName.GetHashCode();
      if (LoginPwd.Length != 0) hash ^= LoginPwd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LoginName);
      }
      if (LoginPwd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LoginPwd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginName);
      }
      if (LoginPwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginPwd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginUser other) {
      if (other == null) {
        return;
      }
      if (other.LoginName.Length != 0) {
        LoginName = other.LoginName;
      }
      if (other.LoginPwd.Length != 0) {
        LoginPwd = other.LoginPwd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LoginName = input.ReadString();
            break;
          }
          case 18: {
            LoginPwd = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设备分类
  /// </summary>
  public sealed partial class DeviceCategory : pb::IMessage<DeviceCategory> {
    private static readonly pb::MessageParser<DeviceCategory> _parser = new pb::MessageParser<DeviceCategory>(() => new DeviceCategory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceCategory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceCategory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceCategory(DeviceCategory other) : this() {
      categoryId_ = other.categoryId_;
      name_ = other.name_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceCategory Clone() {
      return new DeviceCategory(this);
    }

    /// <summary>Field number for the "category_id" field.</summary>
    public const int CategoryIdFieldNumber = 1;
    private ulong categoryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceCategory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceCategory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CategoryId != other.CategoryId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CategoryId != 0UL) hash ^= CategoryId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CategoryId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(CategoryId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CategoryId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CategoryId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceCategory other) {
      if (other == null) {
        return;
      }
      if (other.CategoryId != 0UL) {
        CategoryId = other.CategoryId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CategoryId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MediaInfo : pb::IMessage<MediaInfo> {
    private static readonly pb::MessageParser<MediaInfo> _parser = new pb::MessageParser<MediaInfo>(() => new MediaInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MediaInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaInfo(MediaInfo other) : this() {
      videoEncode_ = other.videoEncode_;
      audioEncode_ = other.audioEncode_;
      videoWidth_ = other.videoWidth_;
      videoHeight_ = other.videoHeight_;
      profile_ = other.profile_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MediaInfo Clone() {
      return new MediaInfo(this);
    }

    /// <summary>Field number for the "video_encode" field.</summary>
    public const int VideoEncodeFieldNumber = 1;
    private uint videoEncode_;
    /// <summary>
    ///视频编码,  //1 for h264 2 for h265 3 for svac
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VideoEncode {
      get { return videoEncode_; }
      set {
        videoEncode_ = value;
      }
    }

    /// <summary>Field number for the "audio_encode" field.</summary>
    public const int AudioEncodeFieldNumber = 2;
    private uint audioEncode_;
    /// <summary>
    ///音频编码 //1 for AAC 2 for G729 3 for MP3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AudioEncode {
      get { return audioEncode_; }
      set {
        audioEncode_ = value;
      }
    }

    /// <summary>Field number for the "video_width" field.</summary>
    public const int VideoWidthFieldNumber = 3;
    private uint videoWidth_;
    /// <summary>
    ///视频分辨率宽
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VideoWidth {
      get { return videoWidth_; }
      set {
        videoWidth_ = value;
      }
    }

    /// <summary>Field number for the "video_height" field.</summary>
    public const int VideoHeightFieldNumber = 4;
    private uint videoHeight_;
    /// <summary>
    ///视频分辨率高
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VideoHeight {
      get { return videoHeight_; }
      set {
        videoHeight_ = value;
      }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 5;
    private uint profile_;
    /// <summary>
    ///默认的配置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MediaInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MediaInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VideoEncode != other.VideoEncode) return false;
      if (AudioEncode != other.AudioEncode) return false;
      if (VideoWidth != other.VideoWidth) return false;
      if (VideoHeight != other.VideoHeight) return false;
      if (Profile != other.Profile) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VideoEncode != 0) hash ^= VideoEncode.GetHashCode();
      if (AudioEncode != 0) hash ^= AudioEncode.GetHashCode();
      if (VideoWidth != 0) hash ^= VideoWidth.GetHashCode();
      if (VideoHeight != 0) hash ^= VideoHeight.GetHashCode();
      if (Profile != 0) hash ^= Profile.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VideoEncode != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(VideoEncode);
      }
      if (AudioEncode != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AudioEncode);
      }
      if (VideoWidth != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(VideoWidth);
      }
      if (VideoHeight != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(VideoHeight);
      }
      if (Profile != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Profile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VideoEncode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VideoEncode);
      }
      if (AudioEncode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AudioEncode);
      }
      if (VideoWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VideoWidth);
      }
      if (VideoHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VideoHeight);
      }
      if (Profile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Profile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MediaInfo other) {
      if (other == null) {
        return;
      }
      if (other.VideoEncode != 0) {
        VideoEncode = other.VideoEncode;
      }
      if (other.AudioEncode != 0) {
        AudioEncode = other.AudioEncode;
      }
      if (other.VideoWidth != 0) {
        VideoWidth = other.VideoWidth;
      }
      if (other.VideoHeight != 0) {
        VideoHeight = other.VideoHeight;
      }
      if (other.Profile != 0) {
        Profile = other.Profile;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VideoEncode = input.ReadUInt32();
            break;
          }
          case 16: {
            AudioEncode = input.ReadUInt32();
            break;
          }
          case 24: {
            VideoWidth = input.ReadUInt32();
            break;
          }
          case 32: {
            VideoHeight = input.ReadUInt32();
            break;
          }
          case 40: {
            Profile = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设备属性集详情
  /// </summary>
  public sealed partial class DeviceDetails : pb::IMessage<DeviceDetails> {
    private static readonly pb::MessageParser<DeviceDetails> _parser = new pb::MessageParser<DeviceDetails>(() => new DeviceDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceDetails(DeviceDetails other) : this() {
      guid_ = other.guid_;
      ptzType_ = other.ptzType_;
      manufacturer_ = other.manufacturer_;
      modelNumber_ = other.modelNumber_;
      vendorName_ = other.vendorName_;
      videoEncode_ = other.videoEncode_;
      audioEncode_ = other.audioEncode_;
      isVideoDevice_ = other.isVideoDevice_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceDetails Clone() {
      return new DeviceDetails(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private string guid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ptz_type" field.</summary>
    public const int PtzTypeFieldNumber = 2;
    private uint ptzType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PtzType {
      get { return ptzType_; }
      set {
        ptzType_ = value;
      }
    }

    /// <summary>Field number for the "manufacturer" field.</summary>
    public const int ManufacturerFieldNumber = 3;
    private string manufacturer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Manufacturer {
      get { return manufacturer_; }
      set {
        manufacturer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_number" field.</summary>
    public const int ModelNumberFieldNumber = 4;
    private string modelNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelNumber {
      get { return modelNumber_; }
      set {
        modelNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vendor_name" field.</summary>
    public const int VendorNameFieldNumber = 5;
    private string vendorName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VendorName {
      get { return vendorName_; }
      set {
        vendorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "video_encode" field.</summary>
    public const int VideoEncodeFieldNumber = 6;
    private uint videoEncode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VideoEncode {
      get { return videoEncode_; }
      set {
        videoEncode_ = value;
      }
    }

    /// <summary>Field number for the "audio_encode" field.</summary>
    public const int AudioEncodeFieldNumber = 7;
    private uint audioEncode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AudioEncode {
      get { return audioEncode_; }
      set {
        audioEncode_ = value;
      }
    }

    /// <summary>Field number for the "is_video_device" field.</summary>
    public const int IsVideoDeviceFieldNumber = 8;
    private bool isVideoDevice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVideoDevice {
      get { return isVideoDevice_; }
      set {
        isVideoDevice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (PtzType != other.PtzType) return false;
      if (Manufacturer != other.Manufacturer) return false;
      if (ModelNumber != other.ModelNumber) return false;
      if (VendorName != other.VendorName) return false;
      if (VideoEncode != other.VideoEncode) return false;
      if (AudioEncode != other.AudioEncode) return false;
      if (IsVideoDevice != other.IsVideoDevice) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (PtzType != 0) hash ^= PtzType.GetHashCode();
      if (Manufacturer.Length != 0) hash ^= Manufacturer.GetHashCode();
      if (ModelNumber.Length != 0) hash ^= ModelNumber.GetHashCode();
      if (VendorName.Length != 0) hash ^= VendorName.GetHashCode();
      if (VideoEncode != 0) hash ^= VideoEncode.GetHashCode();
      if (AudioEncode != 0) hash ^= AudioEncode.GetHashCode();
      if (IsVideoDevice != false) hash ^= IsVideoDevice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Guid);
      }
      if (PtzType != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(PtzType);
      }
      if (Manufacturer.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Manufacturer);
      }
      if (ModelNumber.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ModelNumber);
      }
      if (VendorName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VendorName);
      }
      if (VideoEncode != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(VideoEncode);
      }
      if (AudioEncode != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(AudioEncode);
      }
      if (IsVideoDevice != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsVideoDevice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (PtzType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PtzType);
      }
      if (Manufacturer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Manufacturer);
      }
      if (ModelNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelNumber);
      }
      if (VendorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VendorName);
      }
      if (VideoEncode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VideoEncode);
      }
      if (AudioEncode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AudioEncode);
      }
      if (IsVideoDevice != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceDetails other) {
      if (other == null) {
        return;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.PtzType != 0) {
        PtzType = other.PtzType;
      }
      if (other.Manufacturer.Length != 0) {
        Manufacturer = other.Manufacturer;
      }
      if (other.ModelNumber.Length != 0) {
        ModelNumber = other.ModelNumber;
      }
      if (other.VendorName.Length != 0) {
        VendorName = other.VendorName;
      }
      if (other.VideoEncode != 0) {
        VideoEncode = other.VideoEncode;
      }
      if (other.AudioEncode != 0) {
        AudioEncode = other.AudioEncode;
      }
      if (other.IsVideoDevice != false) {
        IsVideoDevice = other.IsVideoDevice;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Guid = input.ReadString();
            break;
          }
          case 16: {
            PtzType = input.ReadUInt32();
            break;
          }
          case 26: {
            Manufacturer = input.ReadString();
            break;
          }
          case 34: {
            ModelNumber = input.ReadString();
            break;
          }
          case 42: {
            VendorName = input.ReadString();
            break;
          }
          case 48: {
            VideoEncode = input.ReadUInt32();
            break;
          }
          case 56: {
            AudioEncode = input.ReadUInt32();
            break;
          }
          case 64: {
            IsVideoDevice = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceItemEvent : pb::IMessage<DeviceItemEvent> {
    private static readonly pb::MessageParser<DeviceItemEvent> _parser = new pb::MessageParser<DeviceItemEvent>(() => new DeviceItemEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceItemEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceItemEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceItemEvent(DeviceItemEvent other) : this() {
      guid_ = other.guid_;
      name_ = other.name_;
      description_ = other.description_;
      deviceOperation_ = other.deviceOperation_;
      operatorId_ = other.operatorId_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceItemEvent Clone() {
      return new DeviceItemEvent(this);
    }

    /// <summary>Field number for the "guid" field.</summary>
    public const int GuidFieldNumber = 1;
    private string guid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Guid {
      get { return guid_; }
      set {
        guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_operation" field.</summary>
    public const int DeviceOperationFieldNumber = 4;
    private global::Manage.DeviceOperation deviceOperation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.DeviceOperation DeviceOperation {
      get { return deviceOperation_; }
      set {
        deviceOperation_ = value;
      }
    }

    /// <summary>Field number for the "operator_id" field.</summary>
    public const int OperatorIdFieldNumber = 5;
    private string operatorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperatorId {
      get { return operatorId_; }
      set {
        operatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceItemEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceItemEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Guid != other.Guid) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (DeviceOperation != other.DeviceOperation) return false;
      if (OperatorId != other.OperatorId) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Guid.Length != 0) hash ^= Guid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (DeviceOperation != 0) hash ^= DeviceOperation.GetHashCode();
      if (OperatorId.Length != 0) hash ^= OperatorId.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Guid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Guid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (DeviceOperation != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DeviceOperation);
      }
      if (OperatorId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OperatorId);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Guid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (DeviceOperation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceOperation);
      }
      if (OperatorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperatorId);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceItemEvent other) {
      if (other == null) {
        return;
      }
      if (other.Guid.Length != 0) {
        Guid = other.Guid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.DeviceOperation != 0) {
        DeviceOperation = other.DeviceOperation;
      }
      if (other.OperatorId.Length != 0) {
        OperatorId = other.OperatorId;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Guid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            deviceOperation_ = (global::Manage.DeviceOperation) input.ReadEnum();
            break;
          }
          case 42: {
            OperatorId = input.ReadString();
            break;
          }
          case 48: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddDeviceRequest : pb::IMessage<AddDeviceRequest> {
    private static readonly pb::MessageParser<AddDeviceRequest> _parser = new pb::MessageParser<AddDeviceRequest>(() => new AddDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddDeviceRequest(AddDeviceRequest other) : this() {
      device_ = other.device_.Clone();
      loginRoleId_ = other.loginRoleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddDeviceRequest Clone() {
      return new AddDeviceRequest(this);
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Manage.Device> _repeated_device_codec
        = pb::FieldCodec.ForMessage(10, global::Manage.Device.Parser);
    private readonly pbc::RepeatedField<global::Manage.Device> device_ = new pbc::RepeatedField<global::Manage.Device>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.Device> Device {
      get { return device_; }
    }

    /// <summary>Field number for the "login_role_id" field.</summary>
    public const int LoginRoleIdFieldNumber = 2;
    private string loginRoleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginRoleId {
      get { return loginRoleId_; }
      set {
        loginRoleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!device_.Equals(other.device_)) return false;
      if (LoginRoleId != other.LoginRoleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= device_.GetHashCode();
      if (LoginRoleId.Length != 0) hash ^= LoginRoleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      device_.WriteTo(output, _repeated_device_codec);
      if (LoginRoleId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LoginRoleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += device_.CalculateSize(_repeated_device_codec);
      if (LoginRoleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginRoleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddDeviceRequest other) {
      if (other == null) {
        return;
      }
      device_.Add(other.device_);
      if (other.LoginRoleId.Length != 0) {
        LoginRoleId = other.LoginRoleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            device_.AddEntriesFrom(input, _repeated_device_codec);
            break;
          }
          case 18: {
            LoginRoleId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddDeviceResponse : pb::IMessage<AddDeviceResponse> {
    private static readonly pb::MessageParser<AddDeviceResponse> _parser = new pb::MessageParser<AddDeviceResponse>(() => new AddDeviceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddDeviceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddDeviceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddDeviceResponse(AddDeviceResponse other) : this() {
      duplicateNames_ = other.duplicateNames_.Clone();
      channelCreateFailedName_ = other.channelCreateFailedName_.Clone();
      successImportNumber_ = other.successImportNumber_;
      failedImportNumber_ = other.failedImportNumber_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddDeviceResponse Clone() {
      return new AddDeviceResponse(this);
    }

    /// <summary>Field number for the "duplicate_names" field.</summary>
    public const int DuplicateNamesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_duplicateNames_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> duplicateNames_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DuplicateNames {
      get { return duplicateNames_; }
    }

    /// <summary>Field number for the "channel_create_failed_name" field.</summary>
    public const int ChannelCreateFailedNameFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_channelCreateFailedName_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> channelCreateFailedName_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ChannelCreateFailedName {
      get { return channelCreateFailedName_; }
    }

    /// <summary>Field number for the "success_import_number" field.</summary>
    public const int SuccessImportNumberFieldNumber = 3;
    private int successImportNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuccessImportNumber {
      get { return successImportNumber_; }
      set {
        successImportNumber_ = value;
      }
    }

    /// <summary>Field number for the "failed_import_number" field.</summary>
    public const int FailedImportNumberFieldNumber = 4;
    private int failedImportNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FailedImportNumber {
      get { return failedImportNumber_; }
      set {
        failedImportNumber_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private global::Manage.OP_RESULT_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.OP_RESULT_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddDeviceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddDeviceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!duplicateNames_.Equals(other.duplicateNames_)) return false;
      if(!channelCreateFailedName_.Equals(other.channelCreateFailedName_)) return false;
      if (SuccessImportNumber != other.SuccessImportNumber) return false;
      if (FailedImportNumber != other.FailedImportNumber) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= duplicateNames_.GetHashCode();
      hash ^= channelCreateFailedName_.GetHashCode();
      if (SuccessImportNumber != 0) hash ^= SuccessImportNumber.GetHashCode();
      if (FailedImportNumber != 0) hash ^= FailedImportNumber.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      duplicateNames_.WriteTo(output, _repeated_duplicateNames_codec);
      channelCreateFailedName_.WriteTo(output, _repeated_channelCreateFailedName_codec);
      if (SuccessImportNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SuccessImportNumber);
      }
      if (FailedImportNumber != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FailedImportNumber);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += duplicateNames_.CalculateSize(_repeated_duplicateNames_codec);
      size += channelCreateFailedName_.CalculateSize(_repeated_channelCreateFailedName_codec);
      if (SuccessImportNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuccessImportNumber);
      }
      if (FailedImportNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailedImportNumber);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddDeviceResponse other) {
      if (other == null) {
        return;
      }
      duplicateNames_.Add(other.duplicateNames_);
      channelCreateFailedName_.Add(other.channelCreateFailedName_);
      if (other.SuccessImportNumber != 0) {
        SuccessImportNumber = other.SuccessImportNumber;
      }
      if (other.FailedImportNumber != 0) {
        FailedImportNumber = other.FailedImportNumber;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            duplicateNames_.AddEntriesFrom(input, _repeated_duplicateNames_codec);
            break;
          }
          case 18: {
            channelCreateFailedName_.AddEntriesFrom(input, _repeated_channelCreateFailedName_codec);
            break;
          }
          case 24: {
            SuccessImportNumber = input.ReadInt32();
            break;
          }
          case 32: {
            FailedImportNumber = input.ReadInt32();
            break;
          }
          case 40: {
            status_ = (global::Manage.OP_RESULT_STATUS) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteDeviceRequest : pb::IMessage<DeleteDeviceRequest> {
    private static readonly pb::MessageParser<DeleteDeviceRequest> _parser = new pb::MessageParser<DeleteDeviceRequest>(() => new DeleteDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeviceRequest(DeleteDeviceRequest other) : this() {
      devicesId_ = other.devicesId_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeviceRequest Clone() {
      return new DeleteDeviceRequest(this);
    }

    /// <summary>Field number for the "devices_id" field.</summary>
    public const int DevicesIdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_devicesId_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> devicesId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DevicesId {
      get { return devicesId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!devicesId_.Equals(other.devicesId_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= devicesId_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      devicesId_.WriteTo(output, _repeated_devicesId_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += devicesId_.CalculateSize(_repeated_devicesId_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteDeviceRequest other) {
      if (other == null) {
        return;
      }
      devicesId_.Add(other.devicesId_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            devicesId_.AddEntriesFrom(input, _repeated_devicesId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteDeviceResponse : pb::IMessage<DeleteDeviceResponse> {
    private static readonly pb::MessageParser<DeleteDeviceResponse> _parser = new pb::MessageParser<DeleteDeviceResponse>(() => new DeleteDeviceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteDeviceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeviceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeviceResponse(DeleteDeviceResponse other) : this() {
      status_ = other.status_;
      deviceItem_ = other.deviceItem_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDeviceResponse Clone() {
      return new DeleteDeviceResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Manage.OP_RESULT_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.OP_RESULT_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "device_item" field.</summary>
    public const int DeviceItemFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Manage.Device> _repeated_deviceItem_codec
        = pb::FieldCodec.ForMessage(18, global::Manage.Device.Parser);
    private readonly pbc::RepeatedField<global::Manage.Device> deviceItem_ = new pbc::RepeatedField<global::Manage.Device>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.Device> DeviceItem {
      get { return deviceItem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteDeviceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteDeviceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!deviceItem_.Equals(other.deviceItem_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= deviceItem_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      deviceItem_.WriteTo(output, _repeated_deviceItem_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += deviceItem_.CalculateSize(_repeated_deviceItem_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteDeviceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      deviceItem_.Add(other.deviceItem_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Manage.OP_RESULT_STATUS) input.ReadEnum();
            break;
          }
          case 18: {
            deviceItem_.AddEntriesFrom(input, _repeated_deviceItem_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateDeviceRequest : pb::IMessage<UpdateDeviceRequest> {
    private static readonly pb::MessageParser<UpdateDeviceRequest> _parser = new pb::MessageParser<UpdateDeviceRequest>(() => new UpdateDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeviceRequest(UpdateDeviceRequest other) : this() {
      loginRoleId_ = other.loginRoleId_;
      deviceItem_ = other.deviceItem_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeviceRequest Clone() {
      return new UpdateDeviceRequest(this);
    }

    /// <summary>Field number for the "login_role_id" field.</summary>
    public const int LoginRoleIdFieldNumber = 1;
    private string loginRoleId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginRoleId {
      get { return loginRoleId_; }
      set {
        loginRoleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "device_item" field.</summary>
    public const int DeviceItemFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Manage.Device> _repeated_deviceItem_codec
        = pb::FieldCodec.ForMessage(18, global::Manage.Device.Parser);
    private readonly pbc::RepeatedField<global::Manage.Device> deviceItem_ = new pbc::RepeatedField<global::Manage.Device>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.Device> DeviceItem {
      get { return deviceItem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LoginRoleId != other.LoginRoleId) return false;
      if(!deviceItem_.Equals(other.deviceItem_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LoginRoleId.Length != 0) hash ^= LoginRoleId.GetHashCode();
      hash ^= deviceItem_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginRoleId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LoginRoleId);
      }
      deviceItem_.WriteTo(output, _repeated_deviceItem_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginRoleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginRoleId);
      }
      size += deviceItem_.CalculateSize(_repeated_deviceItem_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.LoginRoleId.Length != 0) {
        LoginRoleId = other.LoginRoleId;
      }
      deviceItem_.Add(other.deviceItem_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LoginRoleId = input.ReadString();
            break;
          }
          case 18: {
            deviceItem_.AddEntriesFrom(input, _repeated_deviceItem_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateDeviceResponse : pb::IMessage<UpdateDeviceResponse> {
    private static readonly pb::MessageParser<UpdateDeviceResponse> _parser = new pb::MessageParser<UpdateDeviceResponse>(() => new UpdateDeviceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDeviceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeviceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeviceResponse(UpdateDeviceResponse other) : this() {
      status_ = other.status_;
      deviceItem_ = other.deviceItem_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeviceResponse Clone() {
      return new UpdateDeviceResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Manage.OP_RESULT_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.OP_RESULT_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "device_item" field.</summary>
    public const int DeviceItemFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Manage.Device> _repeated_deviceItem_codec
        = pb::FieldCodec.ForMessage(26, global::Manage.Device.Parser);
    private readonly pbc::RepeatedField<global::Manage.Device> deviceItem_ = new pbc::RepeatedField<global::Manage.Device>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.Device> DeviceItem {
      get { return deviceItem_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDeviceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDeviceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!deviceItem_.Equals(other.deviceItem_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= deviceItem_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      deviceItem_.WriteTo(output, _repeated_deviceItem_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += deviceItem_.CalculateSize(_repeated_deviceItem_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDeviceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      deviceItem_.Add(other.deviceItem_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Manage.OP_RESULT_STATUS) input.ReadEnum();
            break;
          }
          case 26: {
            deviceItem_.AddEntriesFrom(input, _repeated_deviceItem_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryRequest : pb::IMessage<QueryRequest> {
    private static readonly pb::MessageParser<QueryRequest> _parser = new pb::MessageParser<QueryRequest>(() => new QueryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRequest(QueryRequest other) : this() {
      QueryCondition = other.queryCondition_ != null ? other.QueryCondition.Clone() : null;
      orderby_ = other.orderby_;
      isAscend_ = other.isAscend_;
      pageNumber_ = other.pageNumber_;
      countPerPage_ = other.countPerPage_;
      loginRoleId_ = other.loginRoleId_;
      language_ = other.language_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRequest Clone() {
      return new QueryRequest(this);
    }

    /// <summary>Field number for the "query_condition" field.</summary>
    public const int QueryConditionFieldNumber = 1;
    private global::Manage.QueryCondition queryCondition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.QueryCondition QueryCondition {
      get { return queryCondition_; }
      set {
        queryCondition_ = value;
      }
    }

    /// <summary>Field number for the "orderby" field.</summary>
    public const int OrderbyFieldNumber = 2;
    private global::Manage.OrderBy orderby_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.OrderBy Orderby {
      get { return orderby_; }
      set {
        orderby_ = value;
      }
    }

    /// <summary>Field number for the "IsAscend" field.</summary>
    public const int IsAscendFieldNumber = 3;
    private bool isAscend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAscend {
      get { return isAscend_; }
      set {
        isAscend_ = value;
      }
    }

    /// <summary>Field number for the "page_number" field.</summary>
    public const int PageNumberFieldNumber = 4;
    private int pageNumber_;
    /// <summary>
    ///page number
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageNumber {
      get { return pageNumber_; }
      set {
        pageNumber_ = value;
      }
    }

    /// <summary>Field number for the "count_per_page" field.</summary>
    public const int CountPerPageFieldNumber = 5;
    private int countPerPage_;
    /// <summary>
    /// item count of per page.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountPerPage {
      get { return countPerPage_; }
      set {
        countPerPage_ = value;
      }
    }

    /// <summary>Field number for the "loginRoleId" field.</summary>
    public const int LoginRoleIdFieldNumber = 6;
    private string loginRoleId_ = "";
    /// <summary>
    ///  当前登录的角色 ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginRoleId {
      get { return loginRoleId_; }
      set {
        loginRoleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 7;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(QueryCondition, other.QueryCondition)) return false;
      if (Orderby != other.Orderby) return false;
      if (IsAscend != other.IsAscend) return false;
      if (PageNumber != other.PageNumber) return false;
      if (CountPerPage != other.CountPerPage) return false;
      if (LoginRoleId != other.LoginRoleId) return false;
      if (Language != other.Language) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (queryCondition_ != null) hash ^= QueryCondition.GetHashCode();
      if (Orderby != 0) hash ^= Orderby.GetHashCode();
      if (IsAscend != false) hash ^= IsAscend.GetHashCode();
      if (PageNumber != 0) hash ^= PageNumber.GetHashCode();
      if (CountPerPage != 0) hash ^= CountPerPage.GetHashCode();
      if (LoginRoleId.Length != 0) hash ^= LoginRoleId.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (queryCondition_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(QueryCondition);
      }
      if (Orderby != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Orderby);
      }
      if (IsAscend != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsAscend);
      }
      if (PageNumber != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PageNumber);
      }
      if (CountPerPage != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CountPerPage);
      }
      if (LoginRoleId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LoginRoleId);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Language);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (queryCondition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueryCondition);
      }
      if (Orderby != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Orderby);
      }
      if (IsAscend != false) {
        size += 1 + 1;
      }
      if (PageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageNumber);
      }
      if (CountPerPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountPerPage);
      }
      if (LoginRoleId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginRoleId);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryRequest other) {
      if (other == null) {
        return;
      }
      if (other.queryCondition_ != null) {
        if (queryCondition_ == null) {
          queryCondition_ = new global::Manage.QueryCondition();
        }
        QueryCondition.MergeFrom(other.QueryCondition);
      }
      if (other.Orderby != 0) {
        Orderby = other.Orderby;
      }
      if (other.IsAscend != false) {
        IsAscend = other.IsAscend;
      }
      if (other.PageNumber != 0) {
        PageNumber = other.PageNumber;
      }
      if (other.CountPerPage != 0) {
        CountPerPage = other.CountPerPage;
      }
      if (other.LoginRoleId.Length != 0) {
        LoginRoleId = other.LoginRoleId;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (queryCondition_ == null) {
              queryCondition_ = new global::Manage.QueryCondition();
            }
            input.ReadMessage(queryCondition_);
            break;
          }
          case 16: {
            orderby_ = (global::Manage.OrderBy) input.ReadEnum();
            break;
          }
          case 24: {
            IsAscend = input.ReadBool();
            break;
          }
          case 32: {
            PageNumber = input.ReadInt32();
            break;
          }
          case 40: {
            CountPerPage = input.ReadInt32();
            break;
          }
          case 50: {
            LoginRoleId = input.ReadString();
            break;
          }
          case 58: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryCondition : pb::IMessage<QueryCondition> {
    private static readonly pb::MessageParser<QueryCondition> _parser = new pb::MessageParser<QueryCondition>(() => new QueryCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCondition(QueryCondition other) : this() {
      deviceName_ = other.deviceName_;
      ip_ = other.ip_;
      protocolTypes_ = other.protocolTypes_.Clone();
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryCondition Clone() {
      return new QueryCondition(this);
    }

    /// <summary>Field number for the "device_name" field.</summary>
    public const int DeviceNameFieldNumber = 1;
    private string deviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol_types" field.</summary>
    public const int ProtocolTypesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Manage.ProtoType> _repeated_protocolTypes_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::Manage.ProtoType) x);
    private readonly pbc::RepeatedField<global::Manage.ProtoType> protocolTypes_ = new pbc::RepeatedField<global::Manage.ProtoType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.ProtoType> ProtocolTypes {
      get { return protocolTypes_; }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceName != other.DeviceName) return false;
      if (Ip != other.Ip) return false;
      if(!protocolTypes_.Equals(other.protocolTypes_)) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      hash ^= protocolTypes_.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceName);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      protocolTypes_.WriteTo(output, _repeated_protocolTypes_codec);
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      size += protocolTypes_.CalculateSize(_repeated_protocolTypes_codec);
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryCondition other) {
      if (other == null) {
        return;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      protocolTypes_.Add(other.protocolTypes_);
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeviceName = input.ReadString();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            protocolTypes_.AddEntriesFrom(input, _repeated_protocolTypes_codec);
            break;
          }
          case 32: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryDeviceRequest : pb::IMessage<QueryDeviceRequest> {
    private static readonly pb::MessageParser<QueryDeviceRequest> _parser = new pb::MessageParser<QueryDeviceRequest>(() => new QueryDeviceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryDeviceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDeviceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDeviceRequest(QueryDeviceRequest other) : this() {
      deviceId_ = other.deviceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDeviceRequest Clone() {
      return new QueryDeviceRequest(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private string deviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryDeviceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryDeviceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryDeviceRequest other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId.Length != 0) {
        DeviceId = other.DeviceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeviceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryDeviceResponse : pb::IMessage<QueryDeviceResponse> {
    private static readonly pb::MessageParser<QueryDeviceResponse> _parser = new pb::MessageParser<QueryDeviceResponse>(() => new QueryDeviceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryDeviceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDeviceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDeviceResponse(QueryDeviceResponse other) : this() {
      status_ = other.status_;
      devices_ = other.devices_.Clone();
      totalCount_ = other.totalCount_;
      totalPage_ = other.totalPage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryDeviceResponse Clone() {
      return new QueryDeviceResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Manage.SEARCH_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.SEARCH_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "devices" field.</summary>
    public const int DevicesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Manage.Device> _repeated_devices_codec
        = pb::FieldCodec.ForMessage(18, global::Manage.Device.Parser);
    private readonly pbc::RepeatedField<global::Manage.Device> devices_ = new pbc::RepeatedField<global::Manage.Device>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Manage.Device> Devices {
      get { return devices_; }
    }

    /// <summary>Field number for the "total_count" field.</summary>
    public const int TotalCountFieldNumber = 3;
    private int totalCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    /// <summary>Field number for the "total_page" field.</summary>
    public const int TotalPageFieldNumber = 4;
    private int totalPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPage {
      get { return totalPage_; }
      set {
        totalPage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryDeviceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryDeviceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!devices_.Equals(other.devices_)) return false;
      if (TotalCount != other.TotalCount) return false;
      if (TotalPage != other.TotalPage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= devices_.GetHashCode();
      if (TotalCount != 0) hash ^= TotalCount.GetHashCode();
      if (TotalPage != 0) hash ^= TotalPage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      devices_.WriteTo(output, _repeated_devices_codec);
      if (TotalCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalCount);
      }
      if (TotalPage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TotalPage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += devices_.CalculateSize(_repeated_devices_codec);
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalCount);
      }
      if (TotalPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryDeviceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      devices_.Add(other.devices_);
      if (other.TotalCount != 0) {
        TotalCount = other.TotalCount;
      }
      if (other.TotalPage != 0) {
        TotalPage = other.TotalPage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Manage.SEARCH_STATUS) input.ReadEnum();
            break;
          }
          case 18: {
            devices_.AddEntriesFrom(input, _repeated_devices_codec);
            break;
          }
          case 24: {
            TotalCount = input.ReadInt32();
            break;
          }
          case 32: {
            TotalPage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckDupRequest : pb::IMessage<CheckDupRequest> {
    private static readonly pb::MessageParser<CheckDupRequest> _parser = new pb::MessageParser<CheckDupRequest>(() => new CheckDupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckDupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckDupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckDupRequest(CheckDupRequest other) : this() {
      timestamp_ = other.timestamp_;
      category_ = other.category_;
      checkValue_ = other.checkValue_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckDupRequest Clone() {
      return new CheckDupRequest(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private ulong timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 2;
    private global::Manage.Category category_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.Category Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "checkValue" field.</summary>
    public const int CheckValueFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_checkValue_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> checkValue_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CheckValue {
      get { return checkValue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckDupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckDupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (Category != other.Category) return false;
      if(!checkValue_.Equals(other.checkValue_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      hash ^= checkValue_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      if (Category != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Category);
      }
      checkValue_.WriteTo(output, _repeated_checkValue_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
      }
      size += checkValue_.CalculateSize(_repeated_checkValue_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckDupRequest other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      checkValue_.Add(other.checkValue_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 16: {
            category_ = (global::Manage.Category) input.ReadEnum();
            break;
          }
          case 26: {
            checkValue_.AddEntriesFrom(input, _repeated_checkValue_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckDupResponse : pb::IMessage<CheckDupResponse> {
    private static readonly pb::MessageParser<CheckDupResponse> _parser = new pb::MessageParser<CheckDupResponse>(() => new CheckDupResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckDupResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckDupResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckDupResponse(CheckDupResponse other) : this() {
      status_ = other.status_;
      duplValue_ = other.duplValue_.Clone();
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckDupResponse Clone() {
      return new CheckDupResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Manage.CHECKDUPL_RESULT status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.CHECKDUPL_RESULT Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "duplValue" field.</summary>
    public const int DuplValueFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_duplValue_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> duplValue_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DuplValue {
      get { return duplValue_; }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckDupResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckDupResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!duplValue_.Equals(other.duplValue_)) return false;
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= duplValue_.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      duplValue_.WriteTo(output, _repeated_duplValue_codec);
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += duplValue_.CalculateSize(_repeated_duplValue_codec);
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckDupResponse other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      duplValue_.Add(other.duplValue_);
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::Manage.CHECKDUPL_RESULT) input.ReadEnum();
            break;
          }
          case 18: {
            duplValue_.AddEntriesFrom(input, _repeated_duplValue_codec);
            break;
          }
          case 26: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeviceChangeMessage : pb::IMessage<DeviceChangeMessage> {
    private static readonly pb::MessageParser<DeviceChangeMessage> _parser = new pb::MessageParser<DeviceChangeMessage>(() => new DeviceChangeMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeviceChangeMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Manage.DeviceManageReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceChangeMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceChangeMessage(DeviceChangeMessage other) : this() {
      deviceID_ = other.deviceID_;
      ip_ = other.ip_;
      port_ = other.port_;
      loginName_ = other.loginName_;
      loginPwd_ = other.loginPwd_;
      action_ = other.action_;
      deviceName_ = other.deviceName_;
      gBID_ = other.gBID_;
      gBParentID_ = other.gBParentID_;
      channelId_ = other.channelId_;
      dVRID_ = other.dVRID_;
      primaryId_ = other.primaryId_;
      subId_ = other.subId_;
      protoType_ = other.protoType_;
      parentId_ = other.parentId_;
      shapeType_ = other.shapeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeviceChangeMessage Clone() {
      return new DeviceChangeMessage(this);
    }

    /// <summary>Field number for the "deviceID" field.</summary>
    public const int DeviceIDFieldNumber = 1;
    private string deviceID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceID {
      get { return deviceID_; }
      set {
        deviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "loginName" field.</summary>
    public const int LoginNameFieldNumber = 4;
    private string loginName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginName {
      get { return loginName_; }
      set {
        loginName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "loginPwd" field.</summary>
    public const int LoginPwdFieldNumber = 5;
    private string loginPwd_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginPwd {
      get { return loginPwd_; }
      set {
        loginPwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 6;
    private global::Manage.DeviceChangeMessage.Types.Action action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.DeviceChangeMessage.Types.Action Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "deviceName" field.</summary>
    public const int DeviceNameFieldNumber = 7;
    private string deviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GB_ID" field.</summary>
    public const int GBIDFieldNumber = 8;
    private string gBID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GBID {
      get { return gBID_; }
      set {
        gBID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GB_Parent_ID" field.</summary>
    public const int GBParentIDFieldNumber = 9;
    private string gBParentID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GBParentID {
      get { return gBParentID_; }
      set {
        gBParentID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 10;
    private string channelId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelId {
      get { return channelId_; }
      set {
        channelId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DVRID" field.</summary>
    public const int DVRIDFieldNumber = 11;
    private string dVRID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DVRID {
      get { return dVRID_; }
      set {
        dVRID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_id" field.</summary>
    public const int PrimaryIdFieldNumber = 12;
    private string primaryId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrimaryId {
      get { return primaryId_; }
      set {
        primaryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sub_id" field.</summary>
    public const int SubIdFieldNumber = 13;
    private string subId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubId {
      get { return subId_; }
      set {
        subId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "proto_type" field.</summary>
    public const int ProtoTypeFieldNumber = 14;
    private global::Manage.ProtoType protoType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.ProtoType ProtoType {
      get { return protoType_; }
      set {
        protoType_ = value;
      }
    }

    /// <summary>Field number for the "parent_id" field.</summary>
    public const int ParentIdFieldNumber = 15;
    private string parentId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentId {
      get { return parentId_; }
      set {
        parentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shape_type" field.</summary>
    public const int ShapeTypeFieldNumber = 16;
    private global::Manage.ShapeType shapeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Manage.ShapeType ShapeType {
      get { return shapeType_; }
      set {
        shapeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeviceChangeMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeviceChangeMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceID != other.DeviceID) return false;
      if (Ip != other.Ip) return false;
      if (Port != other.Port) return false;
      if (LoginName != other.LoginName) return false;
      if (LoginPwd != other.LoginPwd) return false;
      if (Action != other.Action) return false;
      if (DeviceName != other.DeviceName) return false;
      if (GBID != other.GBID) return false;
      if (GBParentID != other.GBParentID) return false;
      if (ChannelId != other.ChannelId) return false;
      if (DVRID != other.DVRID) return false;
      if (PrimaryId != other.PrimaryId) return false;
      if (SubId != other.SubId) return false;
      if (ProtoType != other.ProtoType) return false;
      if (ParentId != other.ParentId) return false;
      if (ShapeType != other.ShapeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceID.Length != 0) hash ^= DeviceID.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (LoginName.Length != 0) hash ^= LoginName.GetHashCode();
      if (LoginPwd.Length != 0) hash ^= LoginPwd.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (GBID.Length != 0) hash ^= GBID.GetHashCode();
      if (GBParentID.Length != 0) hash ^= GBParentID.GetHashCode();
      if (ChannelId.Length != 0) hash ^= ChannelId.GetHashCode();
      if (DVRID.Length != 0) hash ^= DVRID.GetHashCode();
      if (PrimaryId.Length != 0) hash ^= PrimaryId.GetHashCode();
      if (SubId.Length != 0) hash ^= SubId.GetHashCode();
      if (ProtoType != 0) hash ^= ProtoType.GetHashCode();
      if (ParentId.Length != 0) hash ^= ParentId.GetHashCode();
      if (ShapeType != 0) hash ^= ShapeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceID);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Port);
      }
      if (LoginName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LoginName);
      }
      if (LoginPwd.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LoginPwd);
      }
      if (Action != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Action);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DeviceName);
      }
      if (GBID.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(GBID);
      }
      if (GBParentID.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(GBParentID);
      }
      if (ChannelId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ChannelId);
      }
      if (DVRID.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DVRID);
      }
      if (PrimaryId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(PrimaryId);
      }
      if (SubId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(SubId);
      }
      if (ProtoType != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) ProtoType);
      }
      if (ParentId.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(ParentId);
      }
      if (ShapeType != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) ShapeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceID);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (LoginName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginName);
      }
      if (LoginPwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginPwd);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (GBID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GBID);
      }
      if (GBParentID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GBParentID);
      }
      if (ChannelId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelId);
      }
      if (DVRID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DVRID);
      }
      if (PrimaryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryId);
      }
      if (SubId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubId);
      }
      if (ProtoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProtoType);
      }
      if (ParentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentId);
      }
      if (ShapeType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ShapeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeviceChangeMessage other) {
      if (other == null) {
        return;
      }
      if (other.DeviceID.Length != 0) {
        DeviceID = other.DeviceID;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.LoginName.Length != 0) {
        LoginName = other.LoginName;
      }
      if (other.LoginPwd.Length != 0) {
        LoginPwd = other.LoginPwd;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.GBID.Length != 0) {
        GBID = other.GBID;
      }
      if (other.GBParentID.Length != 0) {
        GBParentID = other.GBParentID;
      }
      if (other.ChannelId.Length != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.DVRID.Length != 0) {
        DVRID = other.DVRID;
      }
      if (other.PrimaryId.Length != 0) {
        PrimaryId = other.PrimaryId;
      }
      if (other.SubId.Length != 0) {
        SubId = other.SubId;
      }
      if (other.ProtoType != 0) {
        ProtoType = other.ProtoType;
      }
      if (other.ParentId.Length != 0) {
        ParentId = other.ParentId;
      }
      if (other.ShapeType != 0) {
        ShapeType = other.ShapeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeviceID = input.ReadString();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadInt32();
            break;
          }
          case 34: {
            LoginName = input.ReadString();
            break;
          }
          case 42: {
            LoginPwd = input.ReadString();
            break;
          }
          case 48: {
            action_ = (global::Manage.DeviceChangeMessage.Types.Action) input.ReadEnum();
            break;
          }
          case 58: {
            DeviceName = input.ReadString();
            break;
          }
          case 66: {
            GBID = input.ReadString();
            break;
          }
          case 74: {
            GBParentID = input.ReadString();
            break;
          }
          case 82: {
            ChannelId = input.ReadString();
            break;
          }
          case 90: {
            DVRID = input.ReadString();
            break;
          }
          case 98: {
            PrimaryId = input.ReadString();
            break;
          }
          case 106: {
            SubId = input.ReadString();
            break;
          }
          case 112: {
            protoType_ = (global::Manage.ProtoType) input.ReadEnum();
            break;
          }
          case 122: {
            ParentId = input.ReadString();
            break;
          }
          case 128: {
            shapeType_ = (global::Manage.ShapeType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeviceChangeMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Action {
        [pbr::OriginalName("Add")] Add = 0,
        [pbr::OriginalName("Update")] Update = 1,
        [pbr::OriginalName("Delete")] Delete = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
