// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_manage.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Manage {
  /// <summary>
  ///service and action definition
  /// </summary>
  public static partial class Manage
  {
    static readonly string __ServiceName = "manage.Manage";

    static readonly grpc::Marshaller<global::Manage.AddDeviceRequest> __Marshaller_AddDeviceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.AddDeviceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.AddDeviceResponse> __Marshaller_AddDeviceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.AddDeviceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.DeleteDeviceRequest> __Marshaller_DeleteDeviceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.DeleteDeviceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.DeleteDeviceResponse> __Marshaller_DeleteDeviceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.DeleteDeviceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.UpdateDeviceRequest> __Marshaller_UpdateDeviceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.UpdateDeviceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.UpdateDeviceResponse> __Marshaller_UpdateDeviceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.UpdateDeviceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.QueryRequest> __Marshaller_QueryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.QueryRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.QueryDeviceResponse> __Marshaller_QueryDeviceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.QueryDeviceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.CheckDupRequest> __Marshaller_CheckDupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.CheckDupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.CheckDupResponse> __Marshaller_CheckDupResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.CheckDupResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.AddViewRequest> __Marshaller_AddViewRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.AddViewRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.AddViewResponse> __Marshaller_AddViewResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.AddViewResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.DeleteViewRequest> __Marshaller_DeleteViewRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.DeleteViewRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.DeleteViewResponse> __Marshaller_DeleteViewResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.DeleteViewResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.UpdateViewRequest> __Marshaller_UpdateViewRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.UpdateViewRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.UpdateViewResponse> __Marshaller_UpdateViewResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.UpdateViewResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.QuerySimpleRequest> __Marshaller_QuerySimpleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.QuerySimpleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.QuerySimpleViewResponse> __Marshaller_QuerySimpleViewResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.QuerySimpleViewResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.QuerySimpleDeviceRequest> __Marshaller_QuerySimpleDeviceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.QuerySimpleDeviceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.QuerySimpleDeviceResponse> __Marshaller_QuerySimpleDeviceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.QuerySimpleDeviceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.QuerySimpleDevicesRequest> __Marshaller_QuerySimpleDevicesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.QuerySimpleDevicesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.QuerySimpleDevicesResponse> __Marshaller_QuerySimpleDevicesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.QuerySimpleDevicesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.FuzzyQueryDeviceRequest> __Marshaller_FuzzyQueryDeviceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.FuzzyQueryDeviceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.FuzzyQueryDeviceResponse> __Marshaller_FuzzyQueryDeviceResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.FuzzyQueryDeviceResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.QueryChannelRequest> __Marshaller_QueryChannelRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.QueryChannelRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Manage.QueryChannelResponse> __Marshaller_QueryChannelResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Manage.QueryChannelResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Manage.AddDeviceRequest, global::Manage.AddDeviceResponse> __Method_AddDevice = new grpc::Method<global::Manage.AddDeviceRequest, global::Manage.AddDeviceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddDevice",
        __Marshaller_AddDeviceRequest,
        __Marshaller_AddDeviceResponse);

    static readonly grpc::Method<global::Manage.DeleteDeviceRequest, global::Manage.DeleteDeviceResponse> __Method_DeleteDevice = new grpc::Method<global::Manage.DeleteDeviceRequest, global::Manage.DeleteDeviceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteDevice",
        __Marshaller_DeleteDeviceRequest,
        __Marshaller_DeleteDeviceResponse);

    static readonly grpc::Method<global::Manage.UpdateDeviceRequest, global::Manage.UpdateDeviceResponse> __Method_UpdateDevice = new grpc::Method<global::Manage.UpdateDeviceRequest, global::Manage.UpdateDeviceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateDevice",
        __Marshaller_UpdateDeviceRequest,
        __Marshaller_UpdateDeviceResponse);

    static readonly grpc::Method<global::Manage.QueryRequest, global::Manage.QueryDeviceResponse> __Method_QueryDevice = new grpc::Method<global::Manage.QueryRequest, global::Manage.QueryDeviceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryDevice",
        __Marshaller_QueryRequest,
        __Marshaller_QueryDeviceResponse);

    static readonly grpc::Method<global::Manage.CheckDupRequest, global::Manage.CheckDupResponse> __Method_CheckDupl = new grpc::Method<global::Manage.CheckDupRequest, global::Manage.CheckDupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckDupl",
        __Marshaller_CheckDupRequest,
        __Marshaller_CheckDupResponse);

    static readonly grpc::Method<global::Manage.AddViewRequest, global::Manage.AddViewResponse> __Method_AddView = new grpc::Method<global::Manage.AddViewRequest, global::Manage.AddViewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddView",
        __Marshaller_AddViewRequest,
        __Marshaller_AddViewResponse);

    static readonly grpc::Method<global::Manage.DeleteViewRequest, global::Manage.DeleteViewResponse> __Method_DeleteView = new grpc::Method<global::Manage.DeleteViewRequest, global::Manage.DeleteViewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteView",
        __Marshaller_DeleteViewRequest,
        __Marshaller_DeleteViewResponse);

    static readonly grpc::Method<global::Manage.UpdateViewRequest, global::Manage.UpdateViewResponse> __Method_UpdateView = new grpc::Method<global::Manage.UpdateViewRequest, global::Manage.UpdateViewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateView",
        __Marshaller_UpdateViewRequest,
        __Marshaller_UpdateViewResponse);

    static readonly grpc::Method<global::Manage.QuerySimpleRequest, global::Manage.QuerySimpleViewResponse> __Method_QuerySimpleView = new grpc::Method<global::Manage.QuerySimpleRequest, global::Manage.QuerySimpleViewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QuerySimpleView",
        __Marshaller_QuerySimpleRequest,
        __Marshaller_QuerySimpleViewResponse);

    static readonly grpc::Method<global::Manage.QuerySimpleDeviceRequest, global::Manage.QuerySimpleDeviceResponse> __Method_QuerySimpleDeviceById = new grpc::Method<global::Manage.QuerySimpleDeviceRequest, global::Manage.QuerySimpleDeviceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QuerySimpleDeviceById",
        __Marshaller_QuerySimpleDeviceRequest,
        __Marshaller_QuerySimpleDeviceResponse);

    static readonly grpc::Method<global::Manage.QuerySimpleDevicesRequest, global::Manage.QuerySimpleDevicesResponse> __Method_QuerySimpleDeviceByIds = new grpc::Method<global::Manage.QuerySimpleDevicesRequest, global::Manage.QuerySimpleDevicesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QuerySimpleDeviceByIds",
        __Marshaller_QuerySimpleDevicesRequest,
        __Marshaller_QuerySimpleDevicesResponse);

    static readonly grpc::Method<global::Manage.FuzzyQueryDeviceRequest, global::Manage.FuzzyQueryDeviceResponse> __Method_FuzzyQueryDeviceByName = new grpc::Method<global::Manage.FuzzyQueryDeviceRequest, global::Manage.FuzzyQueryDeviceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FuzzyQueryDeviceByName",
        __Marshaller_FuzzyQueryDeviceRequest,
        __Marshaller_FuzzyQueryDeviceResponse);

    static readonly grpc::Method<global::Manage.QueryChannelRequest, global::Manage.QueryChannelResponse> __Method_QueryChannelDevices = new grpc::Method<global::Manage.QueryChannelRequest, global::Manage.QueryChannelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryChannelDevices",
        __Marshaller_QueryChannelRequest,
        __Marshaller_QueryChannelResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Manage.DeviceManageReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Manage</summary>
    public abstract partial class ManageBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Manage.AddDeviceResponse> AddDevice(global::Manage.AddDeviceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Manage.DeleteDeviceResponse> DeleteDevice(global::Manage.DeleteDeviceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Manage.UpdateDeviceResponse> UpdateDevice(global::Manage.UpdateDeviceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Manage.QueryDeviceResponse> QueryDevice(global::Manage.QueryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Manage.CheckDupResponse> CheckDupl(global::Manage.CheckDupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Manage.AddViewResponse> AddView(global::Manage.AddViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Manage.DeleteViewResponse> DeleteView(global::Manage.DeleteViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Manage.UpdateViewResponse> UpdateView(global::Manage.UpdateViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Manage.QuerySimpleViewResponse> QuerySimpleView(global::Manage.QuerySimpleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Manage.QuerySimpleDeviceResponse> QuerySimpleDeviceById(global::Manage.QuerySimpleDeviceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Manage.QuerySimpleDevicesResponse> QuerySimpleDeviceByIds(global::Manage.QuerySimpleDevicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Manage.FuzzyQueryDeviceResponse> FuzzyQueryDeviceByName(global::Manage.FuzzyQueryDeviceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Manage.QueryChannelResponse> QueryChannelDevices(global::Manage.QueryChannelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Manage</summary>
    public partial class ManageClient : grpc::ClientBase<ManageClient>
    {
      /// <summary>Creates a new client for Manage</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ManageClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Manage that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ManageClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ManageClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ManageClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Manage.AddDeviceResponse AddDevice(global::Manage.AddDeviceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Manage.AddDeviceResponse AddDevice(global::Manage.AddDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddDevice, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.AddDeviceResponse> AddDeviceAsync(global::Manage.AddDeviceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.AddDeviceResponse> AddDeviceAsync(global::Manage.AddDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddDevice, null, options, request);
      }
      public virtual global::Manage.DeleteDeviceResponse DeleteDevice(global::Manage.DeleteDeviceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Manage.DeleteDeviceResponse DeleteDevice(global::Manage.DeleteDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteDevice, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.DeleteDeviceResponse> DeleteDeviceAsync(global::Manage.DeleteDeviceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.DeleteDeviceResponse> DeleteDeviceAsync(global::Manage.DeleteDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteDevice, null, options, request);
      }
      public virtual global::Manage.UpdateDeviceResponse UpdateDevice(global::Manage.UpdateDeviceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Manage.UpdateDeviceResponse UpdateDevice(global::Manage.UpdateDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateDevice, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.UpdateDeviceResponse> UpdateDeviceAsync(global::Manage.UpdateDeviceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.UpdateDeviceResponse> UpdateDeviceAsync(global::Manage.UpdateDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateDevice, null, options, request);
      }
      public virtual global::Manage.QueryDeviceResponse QueryDevice(global::Manage.QueryRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryDevice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Manage.QueryDeviceResponse QueryDevice(global::Manage.QueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryDevice, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.QueryDeviceResponse> QueryDeviceAsync(global::Manage.QueryRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryDeviceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.QueryDeviceResponse> QueryDeviceAsync(global::Manage.QueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryDevice, null, options, request);
      }
      public virtual global::Manage.CheckDupResponse CheckDupl(global::Manage.CheckDupRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckDupl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Manage.CheckDupResponse CheckDupl(global::Manage.CheckDupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckDupl, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.CheckDupResponse> CheckDuplAsync(global::Manage.CheckDupRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckDuplAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.CheckDupResponse> CheckDuplAsync(global::Manage.CheckDupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckDupl, null, options, request);
      }
      public virtual global::Manage.AddViewResponse AddView(global::Manage.AddViewRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Manage.AddViewResponse AddView(global::Manage.AddViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddView, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.AddViewResponse> AddViewAsync(global::Manage.AddViewRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.AddViewResponse> AddViewAsync(global::Manage.AddViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddView, null, options, request);
      }
      public virtual global::Manage.DeleteViewResponse DeleteView(global::Manage.DeleteViewRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Manage.DeleteViewResponse DeleteView(global::Manage.DeleteViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteView, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.DeleteViewResponse> DeleteViewAsync(global::Manage.DeleteViewRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.DeleteViewResponse> DeleteViewAsync(global::Manage.DeleteViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteView, null, options, request);
      }
      public virtual global::Manage.UpdateViewResponse UpdateView(global::Manage.UpdateViewRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Manage.UpdateViewResponse UpdateView(global::Manage.UpdateViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateView, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.UpdateViewResponse> UpdateViewAsync(global::Manage.UpdateViewRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.UpdateViewResponse> UpdateViewAsync(global::Manage.UpdateViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateView, null, options, request);
      }
      public virtual global::Manage.QuerySimpleViewResponse QuerySimpleView(global::Manage.QuerySimpleRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QuerySimpleView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Manage.QuerySimpleViewResponse QuerySimpleView(global::Manage.QuerySimpleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QuerySimpleView, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.QuerySimpleViewResponse> QuerySimpleViewAsync(global::Manage.QuerySimpleRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QuerySimpleViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.QuerySimpleViewResponse> QuerySimpleViewAsync(global::Manage.QuerySimpleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QuerySimpleView, null, options, request);
      }
      public virtual global::Manage.QuerySimpleDeviceResponse QuerySimpleDeviceById(global::Manage.QuerySimpleDeviceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QuerySimpleDeviceById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Manage.QuerySimpleDeviceResponse QuerySimpleDeviceById(global::Manage.QuerySimpleDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QuerySimpleDeviceById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.QuerySimpleDeviceResponse> QuerySimpleDeviceByIdAsync(global::Manage.QuerySimpleDeviceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QuerySimpleDeviceByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.QuerySimpleDeviceResponse> QuerySimpleDeviceByIdAsync(global::Manage.QuerySimpleDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QuerySimpleDeviceById, null, options, request);
      }
      public virtual global::Manage.QuerySimpleDevicesResponse QuerySimpleDeviceByIds(global::Manage.QuerySimpleDevicesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QuerySimpleDeviceByIds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Manage.QuerySimpleDevicesResponse QuerySimpleDeviceByIds(global::Manage.QuerySimpleDevicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QuerySimpleDeviceByIds, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.QuerySimpleDevicesResponse> QuerySimpleDeviceByIdsAsync(global::Manage.QuerySimpleDevicesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QuerySimpleDeviceByIdsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.QuerySimpleDevicesResponse> QuerySimpleDeviceByIdsAsync(global::Manage.QuerySimpleDevicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QuerySimpleDeviceByIds, null, options, request);
      }
      public virtual global::Manage.FuzzyQueryDeviceResponse FuzzyQueryDeviceByName(global::Manage.FuzzyQueryDeviceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return FuzzyQueryDeviceByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Manage.FuzzyQueryDeviceResponse FuzzyQueryDeviceByName(global::Manage.FuzzyQueryDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FuzzyQueryDeviceByName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.FuzzyQueryDeviceResponse> FuzzyQueryDeviceByNameAsync(global::Manage.FuzzyQueryDeviceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return FuzzyQueryDeviceByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.FuzzyQueryDeviceResponse> FuzzyQueryDeviceByNameAsync(global::Manage.FuzzyQueryDeviceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FuzzyQueryDeviceByName, null, options, request);
      }
      public virtual global::Manage.QueryChannelResponse QueryChannelDevices(global::Manage.QueryChannelRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryChannelDevices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Manage.QueryChannelResponse QueryChannelDevices(global::Manage.QueryChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryChannelDevices, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.QueryChannelResponse> QueryChannelDevicesAsync(global::Manage.QueryChannelRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return QueryChannelDevicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Manage.QueryChannelResponse> QueryChannelDevicesAsync(global::Manage.QueryChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryChannelDevices, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ManageClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ManageClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ManageBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddDevice, serviceImpl.AddDevice)
          .AddMethod(__Method_DeleteDevice, serviceImpl.DeleteDevice)
          .AddMethod(__Method_UpdateDevice, serviceImpl.UpdateDevice)
          .AddMethod(__Method_QueryDevice, serviceImpl.QueryDevice)
          .AddMethod(__Method_CheckDupl, serviceImpl.CheckDupl)
          .AddMethod(__Method_AddView, serviceImpl.AddView)
          .AddMethod(__Method_DeleteView, serviceImpl.DeleteView)
          .AddMethod(__Method_UpdateView, serviceImpl.UpdateView)
          .AddMethod(__Method_QuerySimpleView, serviceImpl.QuerySimpleView)
          .AddMethod(__Method_QuerySimpleDeviceById, serviceImpl.QuerySimpleDeviceById)
          .AddMethod(__Method_QuerySimpleDeviceByIds, serviceImpl.QuerySimpleDeviceByIds)
          .AddMethod(__Method_FuzzyQueryDeviceByName, serviceImpl.FuzzyQueryDeviceByName)
          .AddMethod(__Method_QueryChannelDevices, serviceImpl.QueryChannelDevices).Build();
    }

  }
}
#endregion
