// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: video_session.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace MediaContract {
  /// <summary>
  /// The VideoMessage service definition.
  /// </summary>
  public static partial class VideoSession
  {
    static readonly string __ServiceName = "MediaContract.VideoSession";

    static readonly grpc::Marshaller<global::MediaContract.StartLiveRequest> __Marshaller_StartLiveRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaContract.StartLiveRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaContract.StartLiveReply> __Marshaller_StartLiveReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaContract.StartLiveReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaContract.StartPlaybackRequest> __Marshaller_StartPlaybackRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaContract.StartPlaybackRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaContract.StartPlaybackReply> __Marshaller_StartPlaybackReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaContract.StartPlaybackReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaContract.StopRequest> __Marshaller_StopRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaContract.StopRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaContract.StopReply> __Marshaller_StopReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaContract.StopReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaContract.PlaybackControlRequest> __Marshaller_PlaybackControlRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaContract.PlaybackControlRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaContract.PlaybackControlReply> __Marshaller_PlaybackControlReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaContract.PlaybackControlReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaContract.KeepAliveRequest> __Marshaller_KeepAliveRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaContract.KeepAliveRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MediaContract.KeepAliveReply> __Marshaller_KeepAliveReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MediaContract.KeepAliveReply.Parser.ParseFrom);

    static readonly grpc::Method<global::MediaContract.StartLiveRequest, global::MediaContract.StartLiveReply> __Method_StartLive = new grpc::Method<global::MediaContract.StartLiveRequest, global::MediaContract.StartLiveReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartLive",
        __Marshaller_StartLiveRequest,
        __Marshaller_StartLiveReply);

    static readonly grpc::Method<global::MediaContract.StartPlaybackRequest, global::MediaContract.StartPlaybackReply> __Method_StartPlayback = new grpc::Method<global::MediaContract.StartPlaybackRequest, global::MediaContract.StartPlaybackReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartPlayback",
        __Marshaller_StartPlaybackRequest,
        __Marshaller_StartPlaybackReply);

    static readonly grpc::Method<global::MediaContract.StopRequest, global::MediaContract.StopReply> __Method_Stop = new grpc::Method<global::MediaContract.StopRequest, global::MediaContract.StopReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Stop",
        __Marshaller_StopRequest,
        __Marshaller_StopReply);

    static readonly grpc::Method<global::MediaContract.PlaybackControlRequest, global::MediaContract.PlaybackControlReply> __Method_PlaybackControl = new grpc::Method<global::MediaContract.PlaybackControlRequest, global::MediaContract.PlaybackControlReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PlaybackControl",
        __Marshaller_PlaybackControlRequest,
        __Marshaller_PlaybackControlReply);

    static readonly grpc::Method<global::MediaContract.KeepAliveRequest, global::MediaContract.KeepAliveReply> __Method_KeepAlive = new grpc::Method<global::MediaContract.KeepAliveRequest, global::MediaContract.KeepAliveReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "KeepAlive",
        __Marshaller_KeepAliveRequest,
        __Marshaller_KeepAliveReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MediaContract.VideoSessionReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VideoSession</summary>
    public abstract partial class VideoSessionBase
    {
      /// <summary>
      ///LivePlay
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MediaContract.StartLiveReply> StartLive(global::MediaContract.StartLiveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Playback
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MediaContract.StartPlaybackReply> StartPlayback(global::MediaContract.StartPlaybackRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Stop Video
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MediaContract.StopReply> Stop(global::MediaContract.StopRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///PlaybackControl
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MediaContract.PlaybackControlReply> PlaybackControl(global::MediaContract.PlaybackControlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///keepalive between two point
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::MediaContract.KeepAliveReply> KeepAlive(global::MediaContract.KeepAliveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VideoSession</summary>
    public partial class VideoSessionClient : grpc::ClientBase<VideoSessionClient>
    {
      /// <summary>Creates a new client for VideoSession</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VideoSessionClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VideoSession that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VideoSessionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VideoSessionClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VideoSessionClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///LivePlay
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaContract.StartLiveReply StartLive(global::MediaContract.StartLiveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartLive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///LivePlay
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaContract.StartLiveReply StartLive(global::MediaContract.StartLiveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartLive, null, options, request);
      }
      /// <summary>
      ///LivePlay
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaContract.StartLiveReply> StartLiveAsync(global::MediaContract.StartLiveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartLiveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///LivePlay
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaContract.StartLiveReply> StartLiveAsync(global::MediaContract.StartLiveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartLive, null, options, request);
      }
      /// <summary>
      ///Playback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaContract.StartPlaybackReply StartPlayback(global::MediaContract.StartPlaybackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartPlayback(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Playback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaContract.StartPlaybackReply StartPlayback(global::MediaContract.StartPlaybackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartPlayback, null, options, request);
      }
      /// <summary>
      ///Playback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaContract.StartPlaybackReply> StartPlaybackAsync(global::MediaContract.StartPlaybackRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartPlaybackAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Playback
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaContract.StartPlaybackReply> StartPlaybackAsync(global::MediaContract.StartPlaybackRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartPlayback, null, options, request);
      }
      /// <summary>
      ///Stop Video
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaContract.StopReply Stop(global::MediaContract.StopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stop(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Stop Video
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaContract.StopReply Stop(global::MediaContract.StopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      ///Stop Video
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaContract.StopReply> StopAsync(global::MediaContract.StopRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Stop Video
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaContract.StopReply> StopAsync(global::MediaContract.StopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      ///PlaybackControl
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaContract.PlaybackControlReply PlaybackControl(global::MediaContract.PlaybackControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlaybackControl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///PlaybackControl
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaContract.PlaybackControlReply PlaybackControl(global::MediaContract.PlaybackControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PlaybackControl, null, options, request);
      }
      /// <summary>
      ///PlaybackControl
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaContract.PlaybackControlReply> PlaybackControlAsync(global::MediaContract.PlaybackControlRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlaybackControlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///PlaybackControl
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaContract.PlaybackControlReply> PlaybackControlAsync(global::MediaContract.PlaybackControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PlaybackControl, null, options, request);
      }
      /// <summary>
      ///keepalive between two point
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaContract.KeepAliveReply KeepAlive(global::MediaContract.KeepAliveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KeepAlive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///keepalive between two point
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MediaContract.KeepAliveReply KeepAlive(global::MediaContract.KeepAliveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_KeepAlive, null, options, request);
      }
      /// <summary>
      ///keepalive between two point
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaContract.KeepAliveReply> KeepAliveAsync(global::MediaContract.KeepAliveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KeepAliveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///keepalive between two point
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MediaContract.KeepAliveReply> KeepAliveAsync(global::MediaContract.KeepAliveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_KeepAlive, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override VideoSessionClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VideoSessionClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(VideoSessionBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StartLive, serviceImpl.StartLive)
          .AddMethod(__Method_StartPlayback, serviceImpl.StartPlayback)
          .AddMethod(__Method_Stop, serviceImpl.Stop)
          .AddMethod(__Method_PlaybackControl, serviceImpl.PlaybackControl)
          .AddMethod(__Method_KeepAlive, serviceImpl.KeepAlive).Build();
    }

  }
}
#endregion
