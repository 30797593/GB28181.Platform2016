// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: device_catalog.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcDeviceCatalog {
  public static partial class DeviceCatalog
  {
    static readonly string __ServiceName = "GrpcDeviceCatalog.DeviceCatalog";

    static readonly grpc::Marshaller<global::GrpcDeviceCatalog.DeviceCatalogQueryRequest> __Marshaller_DeviceCatalogQueryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDeviceCatalog.DeviceCatalogQueryRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcDeviceCatalog.DeviceCatalogQueryReply> __Marshaller_DeviceCatalogQueryReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDeviceCatalog.DeviceCatalogQueryReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcDeviceCatalog.DeviceCatalogSubscribeRequest> __Marshaller_DeviceCatalogSubscribeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDeviceCatalog.DeviceCatalogSubscribeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcDeviceCatalog.DeviceCatalogSubscribeReply> __Marshaller_DeviceCatalogSubscribeReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDeviceCatalog.DeviceCatalogSubscribeReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcDeviceCatalog.DeviceCatalogNotifyRequest> __Marshaller_DeviceCatalogNotifyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDeviceCatalog.DeviceCatalogNotifyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcDeviceCatalog.DeviceCatalogNotifyReply> __Marshaller_DeviceCatalogNotifyReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcDeviceCatalog.DeviceCatalogNotifyReply.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcDeviceCatalog.DeviceCatalogQueryRequest, global::GrpcDeviceCatalog.DeviceCatalogQueryReply> __Method_DeviceCatalogQuery = new grpc::Method<global::GrpcDeviceCatalog.DeviceCatalogQueryRequest, global::GrpcDeviceCatalog.DeviceCatalogQueryReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeviceCatalogQuery",
        __Marshaller_DeviceCatalogQueryRequest,
        __Marshaller_DeviceCatalogQueryReply);

    static readonly grpc::Method<global::GrpcDeviceCatalog.DeviceCatalogSubscribeRequest, global::GrpcDeviceCatalog.DeviceCatalogSubscribeReply> __Method_DeviceCatalogSubscribe = new grpc::Method<global::GrpcDeviceCatalog.DeviceCatalogSubscribeRequest, global::GrpcDeviceCatalog.DeviceCatalogSubscribeReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeviceCatalogSubscribe",
        __Marshaller_DeviceCatalogSubscribeRequest,
        __Marshaller_DeviceCatalogSubscribeReply);

    static readonly grpc::Method<global::GrpcDeviceCatalog.DeviceCatalogNotifyRequest, global::GrpcDeviceCatalog.DeviceCatalogNotifyReply> __Method_DeviceCatalogNotify = new grpc::Method<global::GrpcDeviceCatalog.DeviceCatalogNotifyRequest, global::GrpcDeviceCatalog.DeviceCatalogNotifyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeviceCatalogNotify",
        __Marshaller_DeviceCatalogNotifyRequest,
        __Marshaller_DeviceCatalogNotifyReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcDeviceCatalog.DeviceCatalogReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of DeviceCatalog</summary>
    public abstract partial class DeviceCatalogBase
    {
      public virtual global::System.Threading.Tasks.Task<global::GrpcDeviceCatalog.DeviceCatalogQueryReply> DeviceCatalogQuery(global::GrpcDeviceCatalog.DeviceCatalogQueryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcDeviceCatalog.DeviceCatalogSubscribeReply> DeviceCatalogSubscribe(global::GrpcDeviceCatalog.DeviceCatalogSubscribeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GrpcDeviceCatalog.DeviceCatalogNotifyReply> DeviceCatalogNotify(global::GrpcDeviceCatalog.DeviceCatalogNotifyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for DeviceCatalog</summary>
    public partial class DeviceCatalogClient : grpc::ClientBase<DeviceCatalogClient>
    {
      /// <summary>Creates a new client for DeviceCatalog</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public DeviceCatalogClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for DeviceCatalog that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public DeviceCatalogClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected DeviceCatalogClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected DeviceCatalogClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::GrpcDeviceCatalog.DeviceCatalogQueryReply DeviceCatalogQuery(global::GrpcDeviceCatalog.DeviceCatalogQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeviceCatalogQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcDeviceCatalog.DeviceCatalogQueryReply DeviceCatalogQuery(global::GrpcDeviceCatalog.DeviceCatalogQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeviceCatalogQuery, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDeviceCatalog.DeviceCatalogQueryReply> DeviceCatalogQueryAsync(global::GrpcDeviceCatalog.DeviceCatalogQueryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeviceCatalogQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDeviceCatalog.DeviceCatalogQueryReply> DeviceCatalogQueryAsync(global::GrpcDeviceCatalog.DeviceCatalogQueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeviceCatalogQuery, null, options, request);
      }
      public virtual global::GrpcDeviceCatalog.DeviceCatalogSubscribeReply DeviceCatalogSubscribe(global::GrpcDeviceCatalog.DeviceCatalogSubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeviceCatalogSubscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcDeviceCatalog.DeviceCatalogSubscribeReply DeviceCatalogSubscribe(global::GrpcDeviceCatalog.DeviceCatalogSubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeviceCatalogSubscribe, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDeviceCatalog.DeviceCatalogSubscribeReply> DeviceCatalogSubscribeAsync(global::GrpcDeviceCatalog.DeviceCatalogSubscribeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeviceCatalogSubscribeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDeviceCatalog.DeviceCatalogSubscribeReply> DeviceCatalogSubscribeAsync(global::GrpcDeviceCatalog.DeviceCatalogSubscribeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeviceCatalogSubscribe, null, options, request);
      }
      public virtual global::GrpcDeviceCatalog.DeviceCatalogNotifyReply DeviceCatalogNotify(global::GrpcDeviceCatalog.DeviceCatalogNotifyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeviceCatalogNotify(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GrpcDeviceCatalog.DeviceCatalogNotifyReply DeviceCatalogNotify(global::GrpcDeviceCatalog.DeviceCatalogNotifyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeviceCatalogNotify, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDeviceCatalog.DeviceCatalogNotifyReply> DeviceCatalogNotifyAsync(global::GrpcDeviceCatalog.DeviceCatalogNotifyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeviceCatalogNotifyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GrpcDeviceCatalog.DeviceCatalogNotifyReply> DeviceCatalogNotifyAsync(global::GrpcDeviceCatalog.DeviceCatalogNotifyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeviceCatalogNotify, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override DeviceCatalogClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new DeviceCatalogClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(DeviceCatalogBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DeviceCatalogQuery, serviceImpl.DeviceCatalogQuery)
          .AddMethod(__Method_DeviceCatalogSubscribe, serviceImpl.DeviceCatalogSubscribe)
          .AddMethod(__Method_DeviceCatalogNotify, serviceImpl.DeviceCatalogNotify).Build();
    }

  }
}
#endregion
