syntax = "proto3";

package manage;
service ManageGbService {
  rpc GetGb28181ServiceConfig (QueryGb28181ConfigRequest) returns (QueryGb28181ConfigReply) {}
}

// The request message.
message QueryGb28181ConfigRequest {
}

// The response message.
message QueryGb28181ConfigReply {
  repeated SIPAccount sipaccount = 1;
}
//SIPAccount ..
message SIPAccount {
    string Id = 1;//标识符
    string Name = 2;//名称
    string GbVersion = 3;//版本
    string LocalID = 4;//SIP服务器编号*
    string LocalIP = 5;//SIP服务器IP*
    string LocalPort = 6;//SIP服务器端口号*
    string RemotePort = 7;//Device本地端口*
    string Authentication = 8;//授权
    string SIPUsername = 9;//帐号*
    string SIPPassword = 10;//密码*
    string MsgProtocol = 11;//协议类型*
    string StreamProtocol = 12;//协议流类型*
    string TcpMode = 13;//协议连接模式
    string MsgEncode = 14;//编码格式
    string PacketOutOrder = 15;//输出序
    string KeepaliveInterval = 16;//心跳周期（秒）*
    string KeepaliveNumber = 17;//最大心跳超时次数*
  }



/*

//
    // Summary:
    //     Specifies the protocols that the System.Net.Sockets.Socket class supports.
    public enum ProtocolType
    {
        //
        // Summary:
        //     Unknown protocol.
        Unknown = -1,
        //
        // Summary:
        //     Internet Protocol.
        IP = 0,
        //
        // Summary:
        //     IPv6 Hop by Hop Options header.
        IPv6HopByHopOptions = 0,
        //
        // Summary:
        //     Unspecified protocol.
        Unspecified = 0,
        //
        // Summary:
        //     Internet Control Message Protocol.
        Icmp = 1,
        //
        // Summary:
        //     Internet Group Management Protocol.
        Igmp = 2,
        //
        // Summary:
        //     Gateway To Gateway Protocol.
        Ggp = 3,
        //
        // Summary:
        //     Internet Protocol version 4.
        IPv4 = 4,
        //
        // Summary:
        //     Transmission Control Protocol.
        Tcp = 6,
        //
        // Summary:
        //     PARC Universal Packet Protocol.
        Pup = 12,
        //
        // Summary:
        //     User Datagram Protocol.
        Udp = 17,
        //
        // Summary:
        //     Internet Datagram Protocol.
        Idp = 22,
        //
        // Summary:
        //     Internet Protocol version 6 (IPv6).
        IPv6 = 41,
        //
        // Summary:
        //     IPv6 Routing header.
        IPv6RoutingHeader = 43,
        //
        // Summary:
        //     IPv6 Fragment header.
        IPv6FragmentHeader = 44,
        //
        // Summary:
        //     IPv6 Encapsulating Security Payload header.
        IPSecEncapsulatingSecurityPayload = 50,
        //
        // Summary:
        //     IPv6 Authentication header. For details, see RFC 2292 section 2.2.1, available
        //     at http://www.ietf.org.
        IPSecAuthenticationHeader = 51,
        //
        // Summary:
        //     Internet Control Message Protocol for IPv6.
        IcmpV6 = 58,
        //
        // Summary:
        //     IPv6 No next header.
        IPv6NoNextHeader = 59,
        //
        // Summary:
        //     IPv6 Destination Options header.
        IPv6DestinationOptions = 60,
        //
        // Summary:
        //     Net Disk Protocol (unofficial).
        ND = 77,
        //
        // Summary:
        //     Raw IP packet protocol.
        Raw = 255,
        //
        // Summary:
        //     Internet Packet Exchange Protocol.
        Ipx = 1000,
        //
        // Summary:
        //     Sequenced Packet Exchange protocol.
        Spx = 1256,
        //
        // Summary:
        //     Sequenced Packet Exchange version 2 protocol.
        SpxII = 1257
    }





 public enum TcpConnectMode
    {
        /// <summary>
        /// 主动连接
        /// </summary>
        active = 1,
        /// <summary>
        /// 被动连接
        /// </summary>
        passive = 2
    }





*/