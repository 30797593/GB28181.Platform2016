syntax = "proto3";

option objc_class_prefix = "ms";

package MediaContract;

// The VideoMessage service definition.
service VideoSession {
  //LivePlay
  rpc StartLive (StartLiveRequest) returns (StartLiveReply) {}
  rpc StartHistory (StartHistoryRequest) returns (StartHistoryReply) {}
  //Start playback
  rpc StartPlayback (StartPlaybackRequest) returns (StartPlaybackReply) {}
  //Stop Video
  rpc Stop (StopRequest) returns (StopReply) {}
  //file download
  rpc VideoDownload (VideoDownloadRequest) returns (VideoDownloadReply) {}

  //keepalive between two point
  rpc KeepAlive (KeepAliveRequest) returns (KeepAliveReply) {}
}

enum BusinessType {
	BT_LIVEPLAY = 0;
	BT_PLAYBACK = 1;
	BT_DOWNLOAD = 2;
	BT_MAX = 3;
}

enum TransportProtocol {
	TCP = 0;
	UDP = 1;
	MAX = 2;
}

message Header {
	string Version = 1;
    int32 sequence = 2;
	string sessionid = 3;
}

message Status {
    int32 code = 1;
    string msg = 2;
}

// The request message containing StartLiveRequest.
message StartLiveRequest {
	Header hdr =1;
	TransportProtocol trans_proto = 2;
	string gbid = 3;
	string ipaddr = 4;
	int32 port = 5;
}
// The response message containing the StartLiveReply.
message StartLiveReply {
	Header hdr = 1;
	Status status = 2;
	string ipaddr = 3;
	int32 port = 4;
}

// The request message containing StartHistoryRequest.
message StartHistoryRequest {
	Header hdr =1;
	TransportProtocol trans_proto = 2;
	string gbid = 3;
	string ipaddr = 4;
	int32 port = 5;
	string begin_time = 6;
	string end_time = 7;
}
// The response message containing the StartHistoryReply.
message StartHistoryReply {
	Header hdr = 1;
	Status status = 2;
	string ipaddr = 3;
	int32 port = 4;
}

// The request message containing StartPlaybackRequest.
message StartPlaybackRequest {
	Header hdr =1;
	TransportProtocol trans_proto = 2;
	bool is_download = 3;
	int32 port = 4;
	string ipaddr = 5;
	string gbid = 6;
}

// The response message containing the StartPlaybackReply.
message StartPlaybackReply {
	Header hdr = 1;
	Status status = 2;
	string ipaddr = 3;
	int32 port = 4;
}

// The request message containing VideoDownloadRequest.
message VideoDownloadRequest {
	Header hdr =1;
	TransportProtocol trans_proto = 2;
	string gbid = 3;
	string ipaddr = 4;
	int32 port = 5;
	string begin_time = 6;
	string end_time = 7;
}
// The response message containing the VideoDownloadReply.
message VideoDownloadReply {
	Header hdr = 1;
	Status status = 2;
	string ipaddr = 3;
	int32 port = 4;
}

// The request message containing StopLiveRequest.
message StopRequest {
	Header hdr =1;
	string gbid = 2;
	BusinessType business_type =3;
}

// The response message containing the StopLiveReply.
message StopReply {
	Header hdr = 1;
	Status status = 2;
}

// The request message containing ParametersRequest.
message KeepAliveRequest {
	Header hdr = 1;
	string gbid = 2;
}

// The response message containing the ParametersReply.
message KeepAliveReply {
	Header hdr = 1;
	Status status = 2;
}
